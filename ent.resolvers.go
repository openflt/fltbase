package fltbase

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"github.com/openflt/fltbase/ent"
	"github.com/rs/xid"
)

// ID is the resolver for the id field.
func (r *airportResolver) ID(ctx context.Context, obj *ent.Airport) (xid.ID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Latitude is the resolver for the latitude field.
func (r *airportResolver) Latitude(ctx context.Context, obj *ent.Airport) (float64, error) {
	panic(fmt.Errorf("not implemented: Latitude - latitude"))
}

// Longitude is the resolver for the longitude field.
func (r *airportResolver) Longitude(ctx context.Context, obj *ent.Airport) (float64, error) {
	panic(fmt.Errorf("not implemented: Longitude - longitude"))
}

// Elevation is the resolver for the elevation field.
func (r *airportResolver) Elevation(ctx context.Context, obj *ent.Airport) (float64, error) {
	panic(fmt.Errorf("not implemented: Elevation - elevation"))
}

// MagneticVariance is the resolver for the magneticVariance field.
func (r *airportResolver) MagneticVariance(ctx context.Context, obj *ent.Airport) (int, error) {
	panic(fmt.Errorf("not implemented: MagneticVariance - magneticVariance"))
}

// MagneticVarianceYear is the resolver for the magneticVarianceYear field.
func (r *airportResolver) MagneticVarianceYear(ctx context.Context, obj *ent.Airport) (int, error) {
	panic(fmt.Errorf("not implemented: MagneticVarianceYear - magneticVarianceYear"))
}

// TrafficPatternAltitude is the resolver for the trafficPatternAltitude field.
func (r *airportResolver) TrafficPatternAltitude(ctx context.Context, obj *ent.Airport) (int, error) {
	panic(fmt.Errorf("not implemented: TrafficPatternAltitude - trafficPatternAltitude"))
}

// DistanceToCity is the resolver for the distanceToCity field.
func (r *airportResolver) DistanceToCity(ctx context.Context, obj *ent.Airport) (int, error) {
	panic(fmt.Errorf("not implemented: DistanceToCity - distanceToCity"))
}

// Acreage is the resolver for the acreage field.
func (r *airportResolver) Acreage(ctx context.Context, obj *ent.Airport) (int, error) {
	panic(fmt.Errorf("not implemented: Acreage - acreage"))
}

// ID is the resolver for the id field.
func (r *cityResolver) ID(ctx context.Context, obj *ent.City) (xid.ID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *countryResolver) ID(ctx context.Context, obj *ent.Country) (xid.ID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id xid.ID) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []xid.ID) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Airports is the resolver for the airports field.
func (r *queryResolver) Airports(ctx context.Context) ([]*ent.Airport, error) {
	panic(fmt.Errorf("not implemented: Airports - airports"))
}

// ID is the resolver for the id field.
func (r *regionResolver) ID(ctx context.Context, obj *ent.Region) (xid.ID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *stateResolver) ID(ctx context.Context, obj *ent.State) (xid.ID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *airportWhereInputResolver) ID(ctx context.Context, obj *ent.AirportWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *airportWhereInputResolver) IDNeq(ctx context.Context, obj *ent.AirportWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *airportWhereInputResolver) IDIn(ctx context.Context, obj *ent.AirportWhereInput, data []xid.ID) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *airportWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.AirportWhereInput, data []xid.ID) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *airportWhereInputResolver) IDGt(ctx context.Context, obj *ent.AirportWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *airportWhereInputResolver) IDGte(ctx context.Context, obj *ent.AirportWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *airportWhereInputResolver) IDLt(ctx context.Context, obj *ent.AirportWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *airportWhereInputResolver) IDLte(ctx context.Context, obj *ent.AirportWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// Latitude is the resolver for the latitude field.
func (r *airportWhereInputResolver) Latitude(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: Latitude - latitude"))
}

// LatitudeNeq is the resolver for the latitudeNEQ field.
func (r *airportWhereInputResolver) LatitudeNeq(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: LatitudeNeq - latitudeNEQ"))
}

// LatitudeIn is the resolver for the latitudeIn field.
func (r *airportWhereInputResolver) LatitudeIn(ctx context.Context, obj *ent.AirportWhereInput, data []float64) error {
	panic(fmt.Errorf("not implemented: LatitudeIn - latitudeIn"))
}

// LatitudeNotIn is the resolver for the latitudeNotIn field.
func (r *airportWhereInputResolver) LatitudeNotIn(ctx context.Context, obj *ent.AirportWhereInput, data []float64) error {
	panic(fmt.Errorf("not implemented: LatitudeNotIn - latitudeNotIn"))
}

// LatitudeGt is the resolver for the latitudeGT field.
func (r *airportWhereInputResolver) LatitudeGt(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: LatitudeGt - latitudeGT"))
}

// LatitudeGte is the resolver for the latitudeGTE field.
func (r *airportWhereInputResolver) LatitudeGte(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: LatitudeGte - latitudeGTE"))
}

// LatitudeLt is the resolver for the latitudeLT field.
func (r *airportWhereInputResolver) LatitudeLt(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: LatitudeLt - latitudeLT"))
}

// LatitudeLte is the resolver for the latitudeLTE field.
func (r *airportWhereInputResolver) LatitudeLte(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: LatitudeLte - latitudeLTE"))
}

// Longitude is the resolver for the longitude field.
func (r *airportWhereInputResolver) Longitude(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: Longitude - longitude"))
}

// LongitudeNeq is the resolver for the longitudeNEQ field.
func (r *airportWhereInputResolver) LongitudeNeq(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: LongitudeNeq - longitudeNEQ"))
}

// LongitudeIn is the resolver for the longitudeIn field.
func (r *airportWhereInputResolver) LongitudeIn(ctx context.Context, obj *ent.AirportWhereInput, data []float64) error {
	panic(fmt.Errorf("not implemented: LongitudeIn - longitudeIn"))
}

// LongitudeNotIn is the resolver for the longitudeNotIn field.
func (r *airportWhereInputResolver) LongitudeNotIn(ctx context.Context, obj *ent.AirportWhereInput, data []float64) error {
	panic(fmt.Errorf("not implemented: LongitudeNotIn - longitudeNotIn"))
}

// LongitudeGt is the resolver for the longitudeGT field.
func (r *airportWhereInputResolver) LongitudeGt(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: LongitudeGt - longitudeGT"))
}

// LongitudeGte is the resolver for the longitudeGTE field.
func (r *airportWhereInputResolver) LongitudeGte(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: LongitudeGte - longitudeGTE"))
}

// LongitudeLt is the resolver for the longitudeLT field.
func (r *airportWhereInputResolver) LongitudeLt(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: LongitudeLt - longitudeLT"))
}

// LongitudeLte is the resolver for the longitudeLTE field.
func (r *airportWhereInputResolver) LongitudeLte(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: LongitudeLte - longitudeLTE"))
}

// Elevation is the resolver for the elevation field.
func (r *airportWhereInputResolver) Elevation(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: Elevation - elevation"))
}

// ElevationNeq is the resolver for the elevationNEQ field.
func (r *airportWhereInputResolver) ElevationNeq(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: ElevationNeq - elevationNEQ"))
}

// ElevationIn is the resolver for the elevationIn field.
func (r *airportWhereInputResolver) ElevationIn(ctx context.Context, obj *ent.AirportWhereInput, data []float64) error {
	panic(fmt.Errorf("not implemented: ElevationIn - elevationIn"))
}

// ElevationNotIn is the resolver for the elevationNotIn field.
func (r *airportWhereInputResolver) ElevationNotIn(ctx context.Context, obj *ent.AirportWhereInput, data []float64) error {
	panic(fmt.Errorf("not implemented: ElevationNotIn - elevationNotIn"))
}

// ElevationGt is the resolver for the elevationGT field.
func (r *airportWhereInputResolver) ElevationGt(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: ElevationGt - elevationGT"))
}

// ElevationGte is the resolver for the elevationGTE field.
func (r *airportWhereInputResolver) ElevationGte(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: ElevationGte - elevationGTE"))
}

// ElevationLt is the resolver for the elevationLT field.
func (r *airportWhereInputResolver) ElevationLt(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: ElevationLt - elevationLT"))
}

// ElevationLte is the resolver for the elevationLTE field.
func (r *airportWhereInputResolver) ElevationLte(ctx context.Context, obj *ent.AirportWhereInput, data *float64) error {
	panic(fmt.Errorf("not implemented: ElevationLte - elevationLTE"))
}

// MagneticVariance is the resolver for the magneticVariance field.
func (r *airportWhereInputResolver) MagneticVariance(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MagneticVariance - magneticVariance"))
}

// MagneticVarianceNeq is the resolver for the magneticVarianceNEQ field.
func (r *airportWhereInputResolver) MagneticVarianceNeq(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceNeq - magneticVarianceNEQ"))
}

// MagneticVarianceIn is the resolver for the magneticVarianceIn field.
func (r *airportWhereInputResolver) MagneticVarianceIn(ctx context.Context, obj *ent.AirportWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceIn - magneticVarianceIn"))
}

// MagneticVarianceNotIn is the resolver for the magneticVarianceNotIn field.
func (r *airportWhereInputResolver) MagneticVarianceNotIn(ctx context.Context, obj *ent.AirportWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceNotIn - magneticVarianceNotIn"))
}

// MagneticVarianceGt is the resolver for the magneticVarianceGT field.
func (r *airportWhereInputResolver) MagneticVarianceGt(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceGt - magneticVarianceGT"))
}

// MagneticVarianceGte is the resolver for the magneticVarianceGTE field.
func (r *airportWhereInputResolver) MagneticVarianceGte(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceGte - magneticVarianceGTE"))
}

// MagneticVarianceLt is the resolver for the magneticVarianceLT field.
func (r *airportWhereInputResolver) MagneticVarianceLt(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceLt - magneticVarianceLT"))
}

// MagneticVarianceLte is the resolver for the magneticVarianceLTE field.
func (r *airportWhereInputResolver) MagneticVarianceLte(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceLte - magneticVarianceLTE"))
}

// MagneticVarianceYear is the resolver for the magneticVarianceYear field.
func (r *airportWhereInputResolver) MagneticVarianceYear(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceYear - magneticVarianceYear"))
}

// MagneticVarianceYearNeq is the resolver for the magneticVarianceYearNEQ field.
func (r *airportWhereInputResolver) MagneticVarianceYearNeq(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceYearNeq - magneticVarianceYearNEQ"))
}

// MagneticVarianceYearIn is the resolver for the magneticVarianceYearIn field.
func (r *airportWhereInputResolver) MagneticVarianceYearIn(ctx context.Context, obj *ent.AirportWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceYearIn - magneticVarianceYearIn"))
}

// MagneticVarianceYearNotIn is the resolver for the magneticVarianceYearNotIn field.
func (r *airportWhereInputResolver) MagneticVarianceYearNotIn(ctx context.Context, obj *ent.AirportWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceYearNotIn - magneticVarianceYearNotIn"))
}

// MagneticVarianceYearGt is the resolver for the magneticVarianceYearGT field.
func (r *airportWhereInputResolver) MagneticVarianceYearGt(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceYearGt - magneticVarianceYearGT"))
}

// MagneticVarianceYearGte is the resolver for the magneticVarianceYearGTE field.
func (r *airportWhereInputResolver) MagneticVarianceYearGte(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceYearGte - magneticVarianceYearGTE"))
}

// MagneticVarianceYearLt is the resolver for the magneticVarianceYearLT field.
func (r *airportWhereInputResolver) MagneticVarianceYearLt(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceYearLt - magneticVarianceYearLT"))
}

// MagneticVarianceYearLte is the resolver for the magneticVarianceYearLTE field.
func (r *airportWhereInputResolver) MagneticVarianceYearLte(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: MagneticVarianceYearLte - magneticVarianceYearLTE"))
}

// TrafficPatternAltitude is the resolver for the trafficPatternAltitude field.
func (r *airportWhereInputResolver) TrafficPatternAltitude(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TrafficPatternAltitude - trafficPatternAltitude"))
}

// TrafficPatternAltitudeNeq is the resolver for the trafficPatternAltitudeNEQ field.
func (r *airportWhereInputResolver) TrafficPatternAltitudeNeq(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TrafficPatternAltitudeNeq - trafficPatternAltitudeNEQ"))
}

// TrafficPatternAltitudeIn is the resolver for the trafficPatternAltitudeIn field.
func (r *airportWhereInputResolver) TrafficPatternAltitudeIn(ctx context.Context, obj *ent.AirportWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: TrafficPatternAltitudeIn - trafficPatternAltitudeIn"))
}

// TrafficPatternAltitudeNotIn is the resolver for the trafficPatternAltitudeNotIn field.
func (r *airportWhereInputResolver) TrafficPatternAltitudeNotIn(ctx context.Context, obj *ent.AirportWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: TrafficPatternAltitudeNotIn - trafficPatternAltitudeNotIn"))
}

// TrafficPatternAltitudeGt is the resolver for the trafficPatternAltitudeGT field.
func (r *airportWhereInputResolver) TrafficPatternAltitudeGt(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TrafficPatternAltitudeGt - trafficPatternAltitudeGT"))
}

// TrafficPatternAltitudeGte is the resolver for the trafficPatternAltitudeGTE field.
func (r *airportWhereInputResolver) TrafficPatternAltitudeGte(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TrafficPatternAltitudeGte - trafficPatternAltitudeGTE"))
}

// TrafficPatternAltitudeLt is the resolver for the trafficPatternAltitudeLT field.
func (r *airportWhereInputResolver) TrafficPatternAltitudeLt(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TrafficPatternAltitudeLt - trafficPatternAltitudeLT"))
}

// TrafficPatternAltitudeLte is the resolver for the trafficPatternAltitudeLTE field.
func (r *airportWhereInputResolver) TrafficPatternAltitudeLte(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: TrafficPatternAltitudeLte - trafficPatternAltitudeLTE"))
}

// DistanceToCity is the resolver for the distanceToCity field.
func (r *airportWhereInputResolver) DistanceToCity(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: DistanceToCity - distanceToCity"))
}

// DistanceToCityNeq is the resolver for the distanceToCityNEQ field.
func (r *airportWhereInputResolver) DistanceToCityNeq(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: DistanceToCityNeq - distanceToCityNEQ"))
}

// DistanceToCityIn is the resolver for the distanceToCityIn field.
func (r *airportWhereInputResolver) DistanceToCityIn(ctx context.Context, obj *ent.AirportWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: DistanceToCityIn - distanceToCityIn"))
}

// DistanceToCityNotIn is the resolver for the distanceToCityNotIn field.
func (r *airportWhereInputResolver) DistanceToCityNotIn(ctx context.Context, obj *ent.AirportWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: DistanceToCityNotIn - distanceToCityNotIn"))
}

// DistanceToCityGt is the resolver for the distanceToCityGT field.
func (r *airportWhereInputResolver) DistanceToCityGt(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: DistanceToCityGt - distanceToCityGT"))
}

// DistanceToCityGte is the resolver for the distanceToCityGTE field.
func (r *airportWhereInputResolver) DistanceToCityGte(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: DistanceToCityGte - distanceToCityGTE"))
}

// DistanceToCityLt is the resolver for the distanceToCityLT field.
func (r *airportWhereInputResolver) DistanceToCityLt(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: DistanceToCityLt - distanceToCityLT"))
}

// DistanceToCityLte is the resolver for the distanceToCityLTE field.
func (r *airportWhereInputResolver) DistanceToCityLte(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: DistanceToCityLte - distanceToCityLTE"))
}

// Acreage is the resolver for the acreage field.
func (r *airportWhereInputResolver) Acreage(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: Acreage - acreage"))
}

// AcreageNeq is the resolver for the acreageNEQ field.
func (r *airportWhereInputResolver) AcreageNeq(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: AcreageNeq - acreageNEQ"))
}

// AcreageIn is the resolver for the acreageIn field.
func (r *airportWhereInputResolver) AcreageIn(ctx context.Context, obj *ent.AirportWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: AcreageIn - acreageIn"))
}

// AcreageNotIn is the resolver for the acreageNotIn field.
func (r *airportWhereInputResolver) AcreageNotIn(ctx context.Context, obj *ent.AirportWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: AcreageNotIn - acreageNotIn"))
}

// AcreageGt is the resolver for the acreageGT field.
func (r *airportWhereInputResolver) AcreageGt(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: AcreageGt - acreageGT"))
}

// AcreageGte is the resolver for the acreageGTE field.
func (r *airportWhereInputResolver) AcreageGte(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: AcreageGte - acreageGTE"))
}

// AcreageLt is the resolver for the acreageLT field.
func (r *airportWhereInputResolver) AcreageLt(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: AcreageLt - acreageLT"))
}

// AcreageLte is the resolver for the acreageLTE field.
func (r *airportWhereInputResolver) AcreageLte(ctx context.Context, obj *ent.AirportWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: AcreageLte - acreageLTE"))
}

// ID is the resolver for the id field.
func (r *cityWhereInputResolver) ID(ctx context.Context, obj *ent.CityWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *cityWhereInputResolver) IDNeq(ctx context.Context, obj *ent.CityWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *cityWhereInputResolver) IDIn(ctx context.Context, obj *ent.CityWhereInput, data []xid.ID) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *cityWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.CityWhereInput, data []xid.ID) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *cityWhereInputResolver) IDGt(ctx context.Context, obj *ent.CityWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *cityWhereInputResolver) IDGte(ctx context.Context, obj *ent.CityWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *cityWhereInputResolver) IDLt(ctx context.Context, obj *ent.CityWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *cityWhereInputResolver) IDLte(ctx context.Context, obj *ent.CityWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *countryWhereInputResolver) ID(ctx context.Context, obj *ent.CountryWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *countryWhereInputResolver) IDNeq(ctx context.Context, obj *ent.CountryWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *countryWhereInputResolver) IDIn(ctx context.Context, obj *ent.CountryWhereInput, data []xid.ID) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *countryWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.CountryWhereInput, data []xid.ID) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *countryWhereInputResolver) IDGt(ctx context.Context, obj *ent.CountryWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *countryWhereInputResolver) IDGte(ctx context.Context, obj *ent.CountryWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *countryWhereInputResolver) IDLt(ctx context.Context, obj *ent.CountryWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *countryWhereInputResolver) IDLte(ctx context.Context, obj *ent.CountryWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *regionWhereInputResolver) ID(ctx context.Context, obj *ent.RegionWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *regionWhereInputResolver) IDNeq(ctx context.Context, obj *ent.RegionWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *regionWhereInputResolver) IDIn(ctx context.Context, obj *ent.RegionWhereInput, data []xid.ID) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *regionWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.RegionWhereInput, data []xid.ID) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *regionWhereInputResolver) IDGt(ctx context.Context, obj *ent.RegionWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *regionWhereInputResolver) IDGte(ctx context.Context, obj *ent.RegionWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *regionWhereInputResolver) IDLt(ctx context.Context, obj *ent.RegionWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *regionWhereInputResolver) IDLte(ctx context.Context, obj *ent.RegionWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *stateWhereInputResolver) ID(ctx context.Context, obj *ent.StateWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *stateWhereInputResolver) IDNeq(ctx context.Context, obj *ent.StateWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *stateWhereInputResolver) IDIn(ctx context.Context, obj *ent.StateWhereInput, data []xid.ID) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *stateWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.StateWhereInput, data []xid.ID) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *stateWhereInputResolver) IDGt(ctx context.Context, obj *ent.StateWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *stateWhereInputResolver) IDGte(ctx context.Context, obj *ent.StateWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *stateWhereInputResolver) IDLt(ctx context.Context, obj *ent.StateWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *stateWhereInputResolver) IDLte(ctx context.Context, obj *ent.StateWhereInput, data *xid.ID) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// Airport returns AirportResolver implementation.
func (r *Resolver) Airport() AirportResolver { return &airportResolver{r} }

// City returns CityResolver implementation.
func (r *Resolver) City() CityResolver { return &cityResolver{r} }

// Country returns CountryResolver implementation.
func (r *Resolver) Country() CountryResolver { return &countryResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Region returns RegionResolver implementation.
func (r *Resolver) Region() RegionResolver { return &regionResolver{r} }

// State returns StateResolver implementation.
func (r *Resolver) State() StateResolver { return &stateResolver{r} }

// AirportWhereInput returns AirportWhereInputResolver implementation.
func (r *Resolver) AirportWhereInput() AirportWhereInputResolver {
	return &airportWhereInputResolver{r}
}

// CityWhereInput returns CityWhereInputResolver implementation.
func (r *Resolver) CityWhereInput() CityWhereInputResolver { return &cityWhereInputResolver{r} }

// CountryWhereInput returns CountryWhereInputResolver implementation.
func (r *Resolver) CountryWhereInput() CountryWhereInputResolver {
	return &countryWhereInputResolver{r}
}

// RegionWhereInput returns RegionWhereInputResolver implementation.
func (r *Resolver) RegionWhereInput() RegionWhereInputResolver { return &regionWhereInputResolver{r} }

// StateWhereInput returns StateWhereInputResolver implementation.
func (r *Resolver) StateWhereInput() StateWhereInputResolver { return &stateWhereInputResolver{r} }

type airportResolver struct{ *Resolver }
type cityResolver struct{ *Resolver }
type countryResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type regionResolver struct{ *Resolver }
type stateResolver struct{ *Resolver }
type airportWhereInputResolver struct{ *Resolver }
type cityWhereInputResolver struct{ *Resolver }
type countryWhereInputResolver struct{ *Resolver }
type regionWhereInputResolver struct{ *Resolver }
type stateWhereInputResolver struct{ *Resolver }
