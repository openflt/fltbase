directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Airport implements Node {
  id: ID!
  siteID: String!
  facilityType: AirportFacilityType!
  """FAA Airport Identifier, 3-4 characters (e.g. ORD, AL03)"""
  airportID: String!
  """FAA District Office Code (e.g. DCA, TEC, MEM)"""
  adoCode: String!
  """Common name for airport (e.g. Gifford Fld)"""
  name: String!
  ownershipType: AirportOwnershipType!
  usage: AirportUsage!
  latitude: Float!
  longitude: Float!
  locationSurveyMethod: AirportLocationSurveyMethod!
  elevation: Float!
  elevationSurveyMethod: AirportElevationSurveyMethod!
  magneticVariance: Int!
  """Magnetic variation epoch year"""
  magneticVarianceYear: Int!
  trafficPatternAltitude: Int!
  chartName: String!
  distanceToCity: Int!
  directionToCity: AirportDirectionToCity!
  acreage: Int!
  artccID: String!
  artccName: String!
  computerID: String!
  """Tie-In FSS Physically Located on Facility"""
  fssOnAirport: Boolean!
  fssID: String!
  fssName: String!
  phoneNumber: String!
  tollFreeNumber: String!
  alternateFssID: String!
  alternateFssName: String!
  alternateTollFreeNumber: String!
  notamID: String!
  """Availability of NOTAM 'D' Service at Airport"""
  notamFlag: Boolean!
  activationDate: Time!
  status: AirportStatus!
  state: State
  city: City
  region: Region
}
"""AirportDirectionToCity is enum for the field direction_to_city"""
enum AirportDirectionToCity @goModel(model: "github.com/openflt/fltbase/ent/airport.DirectionToCity") {
  N
  NNE
  NE
  ENE
  E
  ESE
  SE
  SSE
  S
  SSW
  SW
  WSW
  W
  WNW
  NW
  NNW
}
"""AirportElevationSurveyMethod is enum for the field elevation_survey_method"""
enum AirportElevationSurveyMethod @goModel(model: "github.com/openflt/fltbase/ent/airport.ElevationSurveyMethod") {
  E
  S
}
"""AirportFacilityType is enum for the field facility_type"""
enum AirportFacilityType @goModel(model: "github.com/openflt/fltbase/ent/airport.FacilityType") {
  AIRPORT
  BALLOONPORT
  SEAPLANE_BASE
  GLIDERPORT
  HELIPORT
  ULTRALIGHT
}
"""AirportLocationSurveyMethod is enum for the field location_survey_method"""
enum AirportLocationSurveyMethod @goModel(model: "github.com/openflt/fltbase/ent/airport.LocationSurveyMethod") {
  E
  S
}
"""AirportOwnershipType is enum for the field ownership_type"""
enum AirportOwnershipType @goModel(model: "github.com/openflt/fltbase/ent/airport.OwnershipType") {
  PU
  PR
  MR
  MA
  MN
  CG
}
"""AirportStatus is enum for the field status"""
enum AirportStatus @goModel(model: "github.com/openflt/fltbase/ent/airport.Status") {
  O
  CI
  CP
}
"""AirportUsage is enum for the field usage"""
enum AirportUsage @goModel(model: "github.com/openflt/fltbase/ent/airport.Usage") {
  PU
  PR
}
"""
AirportWhereInput is used for filtering Airport objects.
Input was generated by ent.
"""
input AirportWhereInput {
  not: AirportWhereInput
  and: [AirportWhereInput!]
  or: [AirportWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """site_id field predicates"""
  siteID: String
  siteIDNEQ: String
  siteIDIn: [String!]
  siteIDNotIn: [String!]
  siteIDGT: String
  siteIDGTE: String
  siteIDLT: String
  siteIDLTE: String
  siteIDContains: String
  siteIDHasPrefix: String
  siteIDHasSuffix: String
  siteIDEqualFold: String
  siteIDContainsFold: String
  """facility_type field predicates"""
  facilityType: AirportFacilityType
  facilityTypeNEQ: AirportFacilityType
  facilityTypeIn: [AirportFacilityType!]
  facilityTypeNotIn: [AirportFacilityType!]
  """airport_id field predicates"""
  airportID: String
  airportIDNEQ: String
  airportIDIn: [String!]
  airportIDNotIn: [String!]
  airportIDGT: String
  airportIDGTE: String
  airportIDLT: String
  airportIDLTE: String
  airportIDContains: String
  airportIDHasPrefix: String
  airportIDHasSuffix: String
  airportIDEqualFold: String
  airportIDContainsFold: String
  """ado_code field predicates"""
  adoCode: String
  adoCodeNEQ: String
  adoCodeIn: [String!]
  adoCodeNotIn: [String!]
  adoCodeGT: String
  adoCodeGTE: String
  adoCodeLT: String
  adoCodeLTE: String
  adoCodeContains: String
  adoCodeHasPrefix: String
  adoCodeHasSuffix: String
  adoCodeEqualFold: String
  adoCodeContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """ownership_type field predicates"""
  ownershipType: AirportOwnershipType
  ownershipTypeNEQ: AirportOwnershipType
  ownershipTypeIn: [AirportOwnershipType!]
  ownershipTypeNotIn: [AirportOwnershipType!]
  """usage field predicates"""
  usage: AirportUsage
  usageNEQ: AirportUsage
  usageIn: [AirportUsage!]
  usageNotIn: [AirportUsage!]
  """latitude field predicates"""
  latitude: Float
  latitudeNEQ: Float
  latitudeIn: [Float!]
  latitudeNotIn: [Float!]
  latitudeGT: Float
  latitudeGTE: Float
  latitudeLT: Float
  latitudeLTE: Float
  """longitude field predicates"""
  longitude: Float
  longitudeNEQ: Float
  longitudeIn: [Float!]
  longitudeNotIn: [Float!]
  longitudeGT: Float
  longitudeGTE: Float
  longitudeLT: Float
  longitudeLTE: Float
  """location_survey_method field predicates"""
  locationSurveyMethod: AirportLocationSurveyMethod
  locationSurveyMethodNEQ: AirportLocationSurveyMethod
  locationSurveyMethodIn: [AirportLocationSurveyMethod!]
  locationSurveyMethodNotIn: [AirportLocationSurveyMethod!]
  """elevation field predicates"""
  elevation: Float
  elevationNEQ: Float
  elevationIn: [Float!]
  elevationNotIn: [Float!]
  elevationGT: Float
  elevationGTE: Float
  elevationLT: Float
  elevationLTE: Float
  """elevation_survey_method field predicates"""
  elevationSurveyMethod: AirportElevationSurveyMethod
  elevationSurveyMethodNEQ: AirportElevationSurveyMethod
  elevationSurveyMethodIn: [AirportElevationSurveyMethod!]
  elevationSurveyMethodNotIn: [AirportElevationSurveyMethod!]
  """magnetic_variance field predicates"""
  magneticVariance: Int
  magneticVarianceNEQ: Int
  magneticVarianceIn: [Int!]
  magneticVarianceNotIn: [Int!]
  magneticVarianceGT: Int
  magneticVarianceGTE: Int
  magneticVarianceLT: Int
  magneticVarianceLTE: Int
  """magnetic_variance_year field predicates"""
  magneticVarianceYear: Int
  magneticVarianceYearNEQ: Int
  magneticVarianceYearIn: [Int!]
  magneticVarianceYearNotIn: [Int!]
  magneticVarianceYearGT: Int
  magneticVarianceYearGTE: Int
  magneticVarianceYearLT: Int
  magneticVarianceYearLTE: Int
  """traffic_pattern_altitude field predicates"""
  trafficPatternAltitude: Int
  trafficPatternAltitudeNEQ: Int
  trafficPatternAltitudeIn: [Int!]
  trafficPatternAltitudeNotIn: [Int!]
  trafficPatternAltitudeGT: Int
  trafficPatternAltitudeGTE: Int
  trafficPatternAltitudeLT: Int
  trafficPatternAltitudeLTE: Int
  """chart_name field predicates"""
  chartName: String
  chartNameNEQ: String
  chartNameIn: [String!]
  chartNameNotIn: [String!]
  chartNameGT: String
  chartNameGTE: String
  chartNameLT: String
  chartNameLTE: String
  chartNameContains: String
  chartNameHasPrefix: String
  chartNameHasSuffix: String
  chartNameEqualFold: String
  chartNameContainsFold: String
  """distance_to_city field predicates"""
  distanceToCity: Int
  distanceToCityNEQ: Int
  distanceToCityIn: [Int!]
  distanceToCityNotIn: [Int!]
  distanceToCityGT: Int
  distanceToCityGTE: Int
  distanceToCityLT: Int
  distanceToCityLTE: Int
  """direction_to_city field predicates"""
  directionToCity: AirportDirectionToCity
  directionToCityNEQ: AirportDirectionToCity
  directionToCityIn: [AirportDirectionToCity!]
  directionToCityNotIn: [AirportDirectionToCity!]
  """acreage field predicates"""
  acreage: Int
  acreageNEQ: Int
  acreageIn: [Int!]
  acreageNotIn: [Int!]
  acreageGT: Int
  acreageGTE: Int
  acreageLT: Int
  acreageLTE: Int
  """artcc_id field predicates"""
  artccID: String
  artccIDNEQ: String
  artccIDIn: [String!]
  artccIDNotIn: [String!]
  artccIDGT: String
  artccIDGTE: String
  artccIDLT: String
  artccIDLTE: String
  artccIDContains: String
  artccIDHasPrefix: String
  artccIDHasSuffix: String
  artccIDEqualFold: String
  artccIDContainsFold: String
  """artcc_name field predicates"""
  artccName: String
  artccNameNEQ: String
  artccNameIn: [String!]
  artccNameNotIn: [String!]
  artccNameGT: String
  artccNameGTE: String
  artccNameLT: String
  artccNameLTE: String
  artccNameContains: String
  artccNameHasPrefix: String
  artccNameHasSuffix: String
  artccNameEqualFold: String
  artccNameContainsFold: String
  """computer_id field predicates"""
  computerID: String
  computerIDNEQ: String
  computerIDIn: [String!]
  computerIDNotIn: [String!]
  computerIDGT: String
  computerIDGTE: String
  computerIDLT: String
  computerIDLTE: String
  computerIDContains: String
  computerIDHasPrefix: String
  computerIDHasSuffix: String
  computerIDEqualFold: String
  computerIDContainsFold: String
  """fss_on_airport field predicates"""
  fssOnAirport: Boolean
  fssOnAirportNEQ: Boolean
  """fss_id field predicates"""
  fssID: String
  fssIDNEQ: String
  fssIDIn: [String!]
  fssIDNotIn: [String!]
  fssIDGT: String
  fssIDGTE: String
  fssIDLT: String
  fssIDLTE: String
  fssIDContains: String
  fssIDHasPrefix: String
  fssIDHasSuffix: String
  fssIDEqualFold: String
  fssIDContainsFold: String
  """fss_name field predicates"""
  fssName: String
  fssNameNEQ: String
  fssNameIn: [String!]
  fssNameNotIn: [String!]
  fssNameGT: String
  fssNameGTE: String
  fssNameLT: String
  fssNameLTE: String
  fssNameContains: String
  fssNameHasPrefix: String
  fssNameHasSuffix: String
  fssNameEqualFold: String
  fssNameContainsFold: String
  """phone_number field predicates"""
  phoneNumber: String
  phoneNumberNEQ: String
  phoneNumberIn: [String!]
  phoneNumberNotIn: [String!]
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberContains: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberEqualFold: String
  phoneNumberContainsFold: String
  """toll_free_number field predicates"""
  tollFreeNumber: String
  tollFreeNumberNEQ: String
  tollFreeNumberIn: [String!]
  tollFreeNumberNotIn: [String!]
  tollFreeNumberGT: String
  tollFreeNumberGTE: String
  tollFreeNumberLT: String
  tollFreeNumberLTE: String
  tollFreeNumberContains: String
  tollFreeNumberHasPrefix: String
  tollFreeNumberHasSuffix: String
  tollFreeNumberEqualFold: String
  tollFreeNumberContainsFold: String
  """alternate_fss_id field predicates"""
  alternateFssID: String
  alternateFssIDNEQ: String
  alternateFssIDIn: [String!]
  alternateFssIDNotIn: [String!]
  alternateFssIDGT: String
  alternateFssIDGTE: String
  alternateFssIDLT: String
  alternateFssIDLTE: String
  alternateFssIDContains: String
  alternateFssIDHasPrefix: String
  alternateFssIDHasSuffix: String
  alternateFssIDEqualFold: String
  alternateFssIDContainsFold: String
  """alternate_fss_name field predicates"""
  alternateFssName: String
  alternateFssNameNEQ: String
  alternateFssNameIn: [String!]
  alternateFssNameNotIn: [String!]
  alternateFssNameGT: String
  alternateFssNameGTE: String
  alternateFssNameLT: String
  alternateFssNameLTE: String
  alternateFssNameContains: String
  alternateFssNameHasPrefix: String
  alternateFssNameHasSuffix: String
  alternateFssNameEqualFold: String
  alternateFssNameContainsFold: String
  """alternate_toll_free_number field predicates"""
  alternateTollFreeNumber: String
  alternateTollFreeNumberNEQ: String
  alternateTollFreeNumberIn: [String!]
  alternateTollFreeNumberNotIn: [String!]
  alternateTollFreeNumberGT: String
  alternateTollFreeNumberGTE: String
  alternateTollFreeNumberLT: String
  alternateTollFreeNumberLTE: String
  alternateTollFreeNumberContains: String
  alternateTollFreeNumberHasPrefix: String
  alternateTollFreeNumberHasSuffix: String
  alternateTollFreeNumberEqualFold: String
  alternateTollFreeNumberContainsFold: String
  """notam_id field predicates"""
  notamID: String
  notamIDNEQ: String
  notamIDIn: [String!]
  notamIDNotIn: [String!]
  notamIDGT: String
  notamIDGTE: String
  notamIDLT: String
  notamIDLTE: String
  notamIDContains: String
  notamIDHasPrefix: String
  notamIDHasSuffix: String
  notamIDEqualFold: String
  notamIDContainsFold: String
  """notam_flag field predicates"""
  notamFlag: Boolean
  notamFlagNEQ: Boolean
  """activation_date field predicates"""
  activationDate: Time
  activationDateNEQ: Time
  activationDateIn: [Time!]
  activationDateNotIn: [Time!]
  activationDateGT: Time
  activationDateGTE: Time
  activationDateLT: Time
  activationDateLTE: Time
  """status field predicates"""
  status: AirportStatus
  statusNEQ: AirportStatus
  statusIn: [AirportStatus!]
  statusNotIn: [AirportStatus!]
  """state edge predicates"""
  hasState: Boolean
  hasStateWith: [StateWhereInput!]
  """city edge predicates"""
  hasCity: Boolean
  hasCityWith: [CityWhereInput!]
  """region edge predicates"""
  hasRegion: Boolean
  hasRegionWith: [RegionWhereInput!]
}
type City implements Node {
  id: ID!
  name: String!
  state: State
  airports: [Airport!]
}
"""
CityWhereInput is used for filtering City objects.
Input was generated by ent.
"""
input CityWhereInput {
  not: CityWhereInput
  and: [CityWhereInput!]
  or: [CityWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """state edge predicates"""
  hasState: Boolean
  hasStateWith: [StateWhereInput!]
  """airports edge predicates"""
  hasAirports: Boolean
  hasAirportsWith: [AirportWhereInput!]
}
type Country implements Node {
  id: ID!
  code: String!
  name: String!
}
"""
CountryWhereInput is used for filtering Country objects.
Input was generated by ent.
"""
input CountryWhereInput {
  not: CountryWhereInput
  and: [CountryWhereInput!]
  or: [CountryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """code field predicates"""
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/openflt/fltbase/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  airports: [Airport!]!
}
type Region implements Node {
  id: ID!
  code: String!
  name: String!
  airports: [Airport!]
}
"""
RegionWhereInput is used for filtering Region objects.
Input was generated by ent.
"""
input RegionWhereInput {
  not: RegionWhereInput
  and: [RegionWhereInput!]
  or: [RegionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """code field predicates"""
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """airports edge predicates"""
  hasAirports: Boolean
  hasAirportsWith: [AirportWhereInput!]
}
type State implements Node {
  id: ID!
  code: String!
  name: String!
  cities: [City!]
  airports: [Airport!]
}
"""
StateWhereInput is used for filtering State objects.
Input was generated by ent.
"""
input StateWhereInput {
  not: StateWhereInput
  and: [StateWhereInput!]
  or: [StateWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """code field predicates"""
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """cities edge predicates"""
  hasCities: Boolean
  hasCitiesWith: [CityWhereInput!]
  """airports edge predicates"""
  hasAirports: Boolean
  hasAirportsWith: [AirportWhereInput!]
}
"""The builtin Time type"""
scalar Time
