// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/openflt/fltbase/ent/airport"
	"github.com/openflt/fltbase/ent/city"
	"github.com/openflt/fltbase/ent/country"
	"github.com/openflt/fltbase/ent/region"
	"github.com/openflt/fltbase/ent/state"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AirportQuery) CollectFields(ctx context.Context, satisfies ...string) (*AirportQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return a, nil
	}
	if err := a.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return a, nil
}

func (a *AirportQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(airport.Columns))
		selectedFields = []string{airport.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "state":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&StateClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.withState = query
		case "city":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CityClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.withCity = query
		case "region":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RegionClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.withRegion = query
		case "siteID":
			if _, ok := fieldSeen[airport.FieldSiteID]; !ok {
				selectedFields = append(selectedFields, airport.FieldSiteID)
				fieldSeen[airport.FieldSiteID] = struct{}{}
			}
		case "facilityType":
			if _, ok := fieldSeen[airport.FieldFacilityType]; !ok {
				selectedFields = append(selectedFields, airport.FieldFacilityType)
				fieldSeen[airport.FieldFacilityType] = struct{}{}
			}
		case "airportID":
			if _, ok := fieldSeen[airport.FieldAirportID]; !ok {
				selectedFields = append(selectedFields, airport.FieldAirportID)
				fieldSeen[airport.FieldAirportID] = struct{}{}
			}
		case "adoCode":
			if _, ok := fieldSeen[airport.FieldAdoCode]; !ok {
				selectedFields = append(selectedFields, airport.FieldAdoCode)
				fieldSeen[airport.FieldAdoCode] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[airport.FieldName]; !ok {
				selectedFields = append(selectedFields, airport.FieldName)
				fieldSeen[airport.FieldName] = struct{}{}
			}
		case "ownershipType":
			if _, ok := fieldSeen[airport.FieldOwnershipType]; !ok {
				selectedFields = append(selectedFields, airport.FieldOwnershipType)
				fieldSeen[airport.FieldOwnershipType] = struct{}{}
			}
		case "usage":
			if _, ok := fieldSeen[airport.FieldUsage]; !ok {
				selectedFields = append(selectedFields, airport.FieldUsage)
				fieldSeen[airport.FieldUsage] = struct{}{}
			}
		case "latitude":
			if _, ok := fieldSeen[airport.FieldLatitude]; !ok {
				selectedFields = append(selectedFields, airport.FieldLatitude)
				fieldSeen[airport.FieldLatitude] = struct{}{}
			}
		case "longitude":
			if _, ok := fieldSeen[airport.FieldLongitude]; !ok {
				selectedFields = append(selectedFields, airport.FieldLongitude)
				fieldSeen[airport.FieldLongitude] = struct{}{}
			}
		case "locationSurveyMethod":
			if _, ok := fieldSeen[airport.FieldLocationSurveyMethod]; !ok {
				selectedFields = append(selectedFields, airport.FieldLocationSurveyMethod)
				fieldSeen[airport.FieldLocationSurveyMethod] = struct{}{}
			}
		case "elevation":
			if _, ok := fieldSeen[airport.FieldElevation]; !ok {
				selectedFields = append(selectedFields, airport.FieldElevation)
				fieldSeen[airport.FieldElevation] = struct{}{}
			}
		case "elevationSurveyMethod":
			if _, ok := fieldSeen[airport.FieldElevationSurveyMethod]; !ok {
				selectedFields = append(selectedFields, airport.FieldElevationSurveyMethod)
				fieldSeen[airport.FieldElevationSurveyMethod] = struct{}{}
			}
		case "magneticVariance":
			if _, ok := fieldSeen[airport.FieldMagneticVariance]; !ok {
				selectedFields = append(selectedFields, airport.FieldMagneticVariance)
				fieldSeen[airport.FieldMagneticVariance] = struct{}{}
			}
		case "magneticVarianceYear":
			if _, ok := fieldSeen[airport.FieldMagneticVarianceYear]; !ok {
				selectedFields = append(selectedFields, airport.FieldMagneticVarianceYear)
				fieldSeen[airport.FieldMagneticVarianceYear] = struct{}{}
			}
		case "trafficPatternAltitude":
			if _, ok := fieldSeen[airport.FieldTrafficPatternAltitude]; !ok {
				selectedFields = append(selectedFields, airport.FieldTrafficPatternAltitude)
				fieldSeen[airport.FieldTrafficPatternAltitude] = struct{}{}
			}
		case "chartName":
			if _, ok := fieldSeen[airport.FieldChartName]; !ok {
				selectedFields = append(selectedFields, airport.FieldChartName)
				fieldSeen[airport.FieldChartName] = struct{}{}
			}
		case "distanceToCity":
			if _, ok := fieldSeen[airport.FieldDistanceToCity]; !ok {
				selectedFields = append(selectedFields, airport.FieldDistanceToCity)
				fieldSeen[airport.FieldDistanceToCity] = struct{}{}
			}
		case "directionToCity":
			if _, ok := fieldSeen[airport.FieldDirectionToCity]; !ok {
				selectedFields = append(selectedFields, airport.FieldDirectionToCity)
				fieldSeen[airport.FieldDirectionToCity] = struct{}{}
			}
		case "acreage":
			if _, ok := fieldSeen[airport.FieldAcreage]; !ok {
				selectedFields = append(selectedFields, airport.FieldAcreage)
				fieldSeen[airport.FieldAcreage] = struct{}{}
			}
		case "artccID":
			if _, ok := fieldSeen[airport.FieldArtccID]; !ok {
				selectedFields = append(selectedFields, airport.FieldArtccID)
				fieldSeen[airport.FieldArtccID] = struct{}{}
			}
		case "artccName":
			if _, ok := fieldSeen[airport.FieldArtccName]; !ok {
				selectedFields = append(selectedFields, airport.FieldArtccName)
				fieldSeen[airport.FieldArtccName] = struct{}{}
			}
		case "computerID":
			if _, ok := fieldSeen[airport.FieldComputerID]; !ok {
				selectedFields = append(selectedFields, airport.FieldComputerID)
				fieldSeen[airport.FieldComputerID] = struct{}{}
			}
		case "fssOnAirport":
			if _, ok := fieldSeen[airport.FieldFssOnAirport]; !ok {
				selectedFields = append(selectedFields, airport.FieldFssOnAirport)
				fieldSeen[airport.FieldFssOnAirport] = struct{}{}
			}
		case "fssID":
			if _, ok := fieldSeen[airport.FieldFssID]; !ok {
				selectedFields = append(selectedFields, airport.FieldFssID)
				fieldSeen[airport.FieldFssID] = struct{}{}
			}
		case "fssName":
			if _, ok := fieldSeen[airport.FieldFssName]; !ok {
				selectedFields = append(selectedFields, airport.FieldFssName)
				fieldSeen[airport.FieldFssName] = struct{}{}
			}
		case "phoneNumber":
			if _, ok := fieldSeen[airport.FieldPhoneNumber]; !ok {
				selectedFields = append(selectedFields, airport.FieldPhoneNumber)
				fieldSeen[airport.FieldPhoneNumber] = struct{}{}
			}
		case "tollFreeNumber":
			if _, ok := fieldSeen[airport.FieldTollFreeNumber]; !ok {
				selectedFields = append(selectedFields, airport.FieldTollFreeNumber)
				fieldSeen[airport.FieldTollFreeNumber] = struct{}{}
			}
		case "alternateFssID":
			if _, ok := fieldSeen[airport.FieldAlternateFssID]; !ok {
				selectedFields = append(selectedFields, airport.FieldAlternateFssID)
				fieldSeen[airport.FieldAlternateFssID] = struct{}{}
			}
		case "alternateFssName":
			if _, ok := fieldSeen[airport.FieldAlternateFssName]; !ok {
				selectedFields = append(selectedFields, airport.FieldAlternateFssName)
				fieldSeen[airport.FieldAlternateFssName] = struct{}{}
			}
		case "alternateTollFreeNumber":
			if _, ok := fieldSeen[airport.FieldAlternateTollFreeNumber]; !ok {
				selectedFields = append(selectedFields, airport.FieldAlternateTollFreeNumber)
				fieldSeen[airport.FieldAlternateTollFreeNumber] = struct{}{}
			}
		case "notamID":
			if _, ok := fieldSeen[airport.FieldNotamID]; !ok {
				selectedFields = append(selectedFields, airport.FieldNotamID)
				fieldSeen[airport.FieldNotamID] = struct{}{}
			}
		case "notamFlag":
			if _, ok := fieldSeen[airport.FieldNotamFlag]; !ok {
				selectedFields = append(selectedFields, airport.FieldNotamFlag)
				fieldSeen[airport.FieldNotamFlag] = struct{}{}
			}
		case "activationDate":
			if _, ok := fieldSeen[airport.FieldActivationDate]; !ok {
				selectedFields = append(selectedFields, airport.FieldActivationDate)
				fieldSeen[airport.FieldActivationDate] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[airport.FieldStatus]; !ok {
				selectedFields = append(selectedFields, airport.FieldStatus)
				fieldSeen[airport.FieldStatus] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		a.Select(selectedFields...)
	}
	return nil
}

type airportPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AirportPaginateOption
}

func newAirportPaginateArgs(rv map[string]any) *airportPaginateArgs {
	args := &airportPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*AirportWhereInput); ok {
		args.opts = append(args.opts, WithAirportFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CityQuery) CollectFields(ctx context.Context, satisfies ...string) (*CityQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CityQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(city.Columns))
		selectedFields = []string{city.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "state":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&StateClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.withState = query
		case "airports":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AirportClient{config: c.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			c.WithNamedAirports(alias, func(wq *AirportQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[city.FieldName]; !ok {
				selectedFields = append(selectedFields, city.FieldName)
				fieldSeen[city.FieldName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type cityPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CityPaginateOption
}

func newCityPaginateArgs(rv map[string]any) *cityPaginateArgs {
	args := &cityPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*CityWhereInput); ok {
		args.opts = append(args.opts, WithCityFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CountryQuery) CollectFields(ctx context.Context, satisfies ...string) (*CountryQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CountryQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(country.Columns))
		selectedFields = []string{country.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "code":
			if _, ok := fieldSeen[country.FieldCode]; !ok {
				selectedFields = append(selectedFields, country.FieldCode)
				fieldSeen[country.FieldCode] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[country.FieldName]; !ok {
				selectedFields = append(selectedFields, country.FieldName)
				fieldSeen[country.FieldName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		c.Select(selectedFields...)
	}
	return nil
}

type countryPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CountryPaginateOption
}

func newCountryPaginateArgs(rv map[string]any) *countryPaginateArgs {
	args := &countryPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*CountryWhereInput); ok {
		args.opts = append(args.opts, WithCountryFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RegionQuery) CollectFields(ctx context.Context, satisfies ...string) (*RegionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return r, nil
	}
	if err := r.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return r, nil
}

func (r *RegionQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(region.Columns))
		selectedFields = []string{region.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "airports":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AirportClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			r.WithNamedAirports(alias, func(wq *AirportQuery) {
				*wq = *query
			})
		case "code":
			if _, ok := fieldSeen[region.FieldCode]; !ok {
				selectedFields = append(selectedFields, region.FieldCode)
				fieldSeen[region.FieldCode] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[region.FieldName]; !ok {
				selectedFields = append(selectedFields, region.FieldName)
				fieldSeen[region.FieldName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		r.Select(selectedFields...)
	}
	return nil
}

type regionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []RegionPaginateOption
}

func newRegionPaginateArgs(rv map[string]any) *regionPaginateArgs {
	args := &regionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*RegionWhereInput); ok {
		args.opts = append(args.opts, WithRegionFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *StateQuery) CollectFields(ctx context.Context, satisfies ...string) (*StateQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return s, nil
	}
	if err := s.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return s, nil
}

func (s *StateQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(state.Columns))
		selectedFields = []string{state.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "cities":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CityClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			s.WithNamedCities(alias, func(wq *CityQuery) {
				*wq = *query
			})
		case "airports":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AirportClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			s.WithNamedAirports(alias, func(wq *AirportQuery) {
				*wq = *query
			})
		case "code":
			if _, ok := fieldSeen[state.FieldCode]; !ok {
				selectedFields = append(selectedFields, state.FieldCode)
				fieldSeen[state.FieldCode] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[state.FieldName]; !ok {
				selectedFields = append(selectedFields, state.FieldName)
				fieldSeen[state.FieldName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		s.Select(selectedFields...)
	}
	return nil
}

type statePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []StatePaginateOption
}

func newStatePaginateArgs(rv map[string]any) *statePaginateArgs {
	args := &statePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*StateWhereInput); ok {
		args.opts = append(args.opts, WithStateFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
