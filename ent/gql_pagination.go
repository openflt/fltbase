// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/openflt/fltbase/ent/airport"
	"github.com/openflt/fltbase/ent/city"
	"github.com/openflt/fltbase/ent/country"
	"github.com/openflt/fltbase/ent/region"
	"github.com/openflt/fltbase/ent/state"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AirportEdge is the edge representation of Airport.
type AirportEdge struct {
	Node   *Airport `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// AirportConnection is the connection containing edges to Airport.
type AirportConnection struct {
	Edges      []*AirportEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *AirportConnection) build(nodes []*Airport, pager *airportPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Airport
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Airport {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Airport {
			return nodes[i]
		}
	}
	c.Edges = make([]*AirportEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AirportEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AirportPaginateOption enables pagination customization.
type AirportPaginateOption func(*airportPager) error

// WithAirportOrder configures pagination ordering.
func WithAirportOrder(order []*AirportOrder) AirportPaginateOption {
	return func(pager *airportPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithAirportFilter configures pagination filter.
func WithAirportFilter(filter func(*AirportQuery) (*AirportQuery, error)) AirportPaginateOption {
	return func(pager *airportPager) error {
		if filter == nil {
			return errors.New("AirportQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type airportPager struct {
	reverse bool
	order   []*AirportOrder
	filter  func(*AirportQuery) (*AirportQuery, error)
}

func newAirportPager(opts []AirportPaginateOption, reverse bool) (*airportPager, error) {
	pager := &airportPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *airportPager) applyFilter(query *AirportQuery) (*AirportQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *airportPager) toCursor(a *Airport) Cursor {
	cs := make([]any, 0, len(p.order))
	for _, o := range p.order {
		cs = append(cs, o.Field.toCursor(a).Value)
	}
	return Cursor{ID: a.ID, Value: cs}
}

func (p *airportPager) applyCursors(query *AirportQuery, after, before *Cursor) (*AirportQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultAirportOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *airportPager) applyOrder(query *AirportQuery) *AirportQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultAirportOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultAirportOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *airportPager) orderExpr(query *AirportQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultAirportOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Airport.
func (a *AirportQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AirportPaginateOption,
) (*AirportConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAirportPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AirportConnection{Edges: []*AirportEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AirportOrderField defines the ordering field of Airport.
type AirportOrderField struct {
	// Value extracts the ordering value from the given Airport.
	Value    func(*Airport) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) airport.OrderOption
	toCursor func(*Airport) Cursor
}

// AirportOrder defines the ordering of Airport.
type AirportOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *AirportOrderField `json:"field"`
}

// DefaultAirportOrder is the default ordering of Airport.
var DefaultAirportOrder = &AirportOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AirportOrderField{
		Value: func(a *Airport) (ent.Value, error) {
			return a.ID, nil
		},
		column: airport.FieldID,
		toTerm: airport.ByID,
		toCursor: func(a *Airport) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Airport into AirportEdge.
func (a *Airport) ToEdge(order *AirportOrder) *AirportEdge {
	if order == nil {
		order = DefaultAirportOrder
	}
	return &AirportEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// CityEdge is the edge representation of City.
type CityEdge struct {
	Node   *City  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// CityConnection is the connection containing edges to City.
type CityConnection struct {
	Edges      []*CityEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *CityConnection) build(nodes []*City, pager *cityPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *City
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *City {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *City {
			return nodes[i]
		}
	}
	c.Edges = make([]*CityEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CityEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CityPaginateOption enables pagination customization.
type CityPaginateOption func(*cityPager) error

// WithCityOrder configures pagination ordering.
func WithCityOrder(order *CityOrder) CityPaginateOption {
	if order == nil {
		order = DefaultCityOrder
	}
	o := *order
	return func(pager *cityPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCityOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCityFilter configures pagination filter.
func WithCityFilter(filter func(*CityQuery) (*CityQuery, error)) CityPaginateOption {
	return func(pager *cityPager) error {
		if filter == nil {
			return errors.New("CityQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type cityPager struct {
	reverse bool
	order   *CityOrder
	filter  func(*CityQuery) (*CityQuery, error)
}

func newCityPager(opts []CityPaginateOption, reverse bool) (*cityPager, error) {
	pager := &cityPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCityOrder
	}
	return pager, nil
}

func (p *cityPager) applyFilter(query *CityQuery) (*CityQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *cityPager) toCursor(c *City) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *cityPager) applyCursors(query *CityQuery, after, before *Cursor) (*CityQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCityOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *cityPager) applyOrder(query *CityQuery) *CityQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCityOrder.Field {
		query = query.Order(DefaultCityOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *cityPager) orderExpr(query *CityQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCityOrder.Field {
			b.Comma().Ident(DefaultCityOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to City.
func (c *CityQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CityPaginateOption,
) (*CityConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCityPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CityConnection{Edges: []*CityEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CityOrderField defines the ordering field of City.
type CityOrderField struct {
	// Value extracts the ordering value from the given City.
	Value    func(*City) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) city.OrderOption
	toCursor func(*City) Cursor
}

// CityOrder defines the ordering of City.
type CityOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *CityOrderField `json:"field"`
}

// DefaultCityOrder is the default ordering of City.
var DefaultCityOrder = &CityOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CityOrderField{
		Value: func(c *City) (ent.Value, error) {
			return c.ID, nil
		},
		column: city.FieldID,
		toTerm: city.ByID,
		toCursor: func(c *City) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts City into CityEdge.
func (c *City) ToEdge(order *CityOrder) *CityEdge {
	if order == nil {
		order = DefaultCityOrder
	}
	return &CityEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CountryEdge is the edge representation of Country.
type CountryEdge struct {
	Node   *Country `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// CountryConnection is the connection containing edges to Country.
type CountryConnection struct {
	Edges      []*CountryEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *CountryConnection) build(nodes []*Country, pager *countryPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Country
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Country {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Country {
			return nodes[i]
		}
	}
	c.Edges = make([]*CountryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CountryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CountryPaginateOption enables pagination customization.
type CountryPaginateOption func(*countryPager) error

// WithCountryOrder configures pagination ordering.
func WithCountryOrder(order *CountryOrder) CountryPaginateOption {
	if order == nil {
		order = DefaultCountryOrder
	}
	o := *order
	return func(pager *countryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCountryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCountryFilter configures pagination filter.
func WithCountryFilter(filter func(*CountryQuery) (*CountryQuery, error)) CountryPaginateOption {
	return func(pager *countryPager) error {
		if filter == nil {
			return errors.New("CountryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type countryPager struct {
	reverse bool
	order   *CountryOrder
	filter  func(*CountryQuery) (*CountryQuery, error)
}

func newCountryPager(opts []CountryPaginateOption, reverse bool) (*countryPager, error) {
	pager := &countryPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCountryOrder
	}
	return pager, nil
}

func (p *countryPager) applyFilter(query *CountryQuery) (*CountryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *countryPager) toCursor(c *Country) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *countryPager) applyCursors(query *CountryQuery, after, before *Cursor) (*CountryQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCountryOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *countryPager) applyOrder(query *CountryQuery) *CountryQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCountryOrder.Field {
		query = query.Order(DefaultCountryOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *countryPager) orderExpr(query *CountryQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCountryOrder.Field {
			b.Comma().Ident(DefaultCountryOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Country.
func (c *CountryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CountryPaginateOption,
) (*CountryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCountryPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CountryConnection{Edges: []*CountryEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CountryOrderField defines the ordering field of Country.
type CountryOrderField struct {
	// Value extracts the ordering value from the given Country.
	Value    func(*Country) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) country.OrderOption
	toCursor func(*Country) Cursor
}

// CountryOrder defines the ordering of Country.
type CountryOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *CountryOrderField `json:"field"`
}

// DefaultCountryOrder is the default ordering of Country.
var DefaultCountryOrder = &CountryOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CountryOrderField{
		Value: func(c *Country) (ent.Value, error) {
			return c.ID, nil
		},
		column: country.FieldID,
		toTerm: country.ByID,
		toCursor: func(c *Country) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Country into CountryEdge.
func (c *Country) ToEdge(order *CountryOrder) *CountryEdge {
	if order == nil {
		order = DefaultCountryOrder
	}
	return &CountryEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// RegionEdge is the edge representation of Region.
type RegionEdge struct {
	Node   *Region `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// RegionConnection is the connection containing edges to Region.
type RegionConnection struct {
	Edges      []*RegionEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *RegionConnection) build(nodes []*Region, pager *regionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Region
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Region {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Region {
			return nodes[i]
		}
	}
	c.Edges = make([]*RegionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RegionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RegionPaginateOption enables pagination customization.
type RegionPaginateOption func(*regionPager) error

// WithRegionOrder configures pagination ordering.
func WithRegionOrder(order *RegionOrder) RegionPaginateOption {
	if order == nil {
		order = DefaultRegionOrder
	}
	o := *order
	return func(pager *regionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRegionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRegionFilter configures pagination filter.
func WithRegionFilter(filter func(*RegionQuery) (*RegionQuery, error)) RegionPaginateOption {
	return func(pager *regionPager) error {
		if filter == nil {
			return errors.New("RegionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type regionPager struct {
	reverse bool
	order   *RegionOrder
	filter  func(*RegionQuery) (*RegionQuery, error)
}

func newRegionPager(opts []RegionPaginateOption, reverse bool) (*regionPager, error) {
	pager := &regionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRegionOrder
	}
	return pager, nil
}

func (p *regionPager) applyFilter(query *RegionQuery) (*RegionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *regionPager) toCursor(r *Region) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *regionPager) applyCursors(query *RegionQuery, after, before *Cursor) (*RegionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRegionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *regionPager) applyOrder(query *RegionQuery) *RegionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRegionOrder.Field {
		query = query.Order(DefaultRegionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *regionPager) orderExpr(query *RegionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRegionOrder.Field {
			b.Comma().Ident(DefaultRegionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Region.
func (r *RegionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RegionPaginateOption,
) (*RegionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRegionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &RegionConnection{Edges: []*RegionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = r.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if r, err = pager.applyCursors(r, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	r = pager.applyOrder(r)
	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// RegionOrderField defines the ordering field of Region.
type RegionOrderField struct {
	// Value extracts the ordering value from the given Region.
	Value    func(*Region) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) region.OrderOption
	toCursor func(*Region) Cursor
}

// RegionOrder defines the ordering of Region.
type RegionOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *RegionOrderField `json:"field"`
}

// DefaultRegionOrder is the default ordering of Region.
var DefaultRegionOrder = &RegionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RegionOrderField{
		Value: func(r *Region) (ent.Value, error) {
			return r.ID, nil
		},
		column: region.FieldID,
		toTerm: region.ByID,
		toCursor: func(r *Region) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Region into RegionEdge.
func (r *Region) ToEdge(order *RegionOrder) *RegionEdge {
	if order == nil {
		order = DefaultRegionOrder
	}
	return &RegionEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// StateEdge is the edge representation of State.
type StateEdge struct {
	Node   *State `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// StateConnection is the connection containing edges to State.
type StateConnection struct {
	Edges      []*StateEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *StateConnection) build(nodes []*State, pager *statePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *State
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *State {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *State {
			return nodes[i]
		}
	}
	c.Edges = make([]*StateEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &StateEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// StatePaginateOption enables pagination customization.
type StatePaginateOption func(*statePager) error

// WithStateOrder configures pagination ordering.
func WithStateOrder(order *StateOrder) StatePaginateOption {
	if order == nil {
		order = DefaultStateOrder
	}
	o := *order
	return func(pager *statePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultStateOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithStateFilter configures pagination filter.
func WithStateFilter(filter func(*StateQuery) (*StateQuery, error)) StatePaginateOption {
	return func(pager *statePager) error {
		if filter == nil {
			return errors.New("StateQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type statePager struct {
	reverse bool
	order   *StateOrder
	filter  func(*StateQuery) (*StateQuery, error)
}

func newStatePager(opts []StatePaginateOption, reverse bool) (*statePager, error) {
	pager := &statePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultStateOrder
	}
	return pager, nil
}

func (p *statePager) applyFilter(query *StateQuery) (*StateQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *statePager) toCursor(s *State) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *statePager) applyCursors(query *StateQuery, after, before *Cursor) (*StateQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultStateOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *statePager) applyOrder(query *StateQuery) *StateQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultStateOrder.Field {
		query = query.Order(DefaultStateOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *statePager) orderExpr(query *StateQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultStateOrder.Field {
			b.Comma().Ident(DefaultStateOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to State.
func (s *StateQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...StatePaginateOption,
) (*StateConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newStatePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &StateConnection{Edges: []*StateEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = s.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if s, err = pager.applyCursors(s, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	s = pager.applyOrder(s)
	nodes, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// StateOrderField defines the ordering field of State.
type StateOrderField struct {
	// Value extracts the ordering value from the given State.
	Value    func(*State) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) state.OrderOption
	toCursor func(*State) Cursor
}

// StateOrder defines the ordering of State.
type StateOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *StateOrderField `json:"field"`
}

// DefaultStateOrder is the default ordering of State.
var DefaultStateOrder = &StateOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &StateOrderField{
		Value: func(s *State) (ent.Value, error) {
			return s.ID, nil
		},
		column: state.FieldID,
		toTerm: state.ByID,
		toCursor: func(s *State) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts State into StateEdge.
func (s *State) ToEdge(order *StateOrder) *StateEdge {
	if order == nil {
		order = DefaultStateOrder
	}
	return &StateEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}
