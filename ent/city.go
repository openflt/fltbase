// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openflt/fltbase/ent/city"
	"github.com/openflt/fltbase/ent/state"
)

// City is the model entity for the City schema.
type City struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CityQuery when eager-loading is set.
	Edges        CityEdges `json:"edges"`
	state_cities *int
	selectValues sql.SelectValues
}

// CityEdges holds the relations/edges for other nodes in the graph.
type CityEdges struct {
	// State holds the value of the state edge.
	State *State `json:"state,omitempty"`
	// Airports holds the value of the airports edge.
	Airports []*Airport `json:"airports,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedAirports map[string][]*Airport
}

// StateOrErr returns the State value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CityEdges) StateOrErr() (*State, error) {
	if e.loadedTypes[0] {
		if e.State == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: state.Label}
		}
		return e.State, nil
	}
	return nil, &NotLoadedError{edge: "state"}
}

// AirportsOrErr returns the Airports value or an error if the edge
// was not loaded in eager-loading.
func (e CityEdges) AirportsOrErr() ([]*Airport, error) {
	if e.loadedTypes[1] {
		return e.Airports, nil
	}
	return nil, &NotLoadedError{edge: "airports"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*City) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case city.FieldID:
			values[i] = new(sql.NullInt64)
		case city.FieldName:
			values[i] = new(sql.NullString)
		case city.ForeignKeys[0]: // state_cities
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the City fields.
func (c *City) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case city.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case city.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case city.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field state_cities", value)
			} else if value.Valid {
				c.state_cities = new(int)
				*c.state_cities = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the City.
// This includes values selected through modifiers, order, etc.
func (c *City) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryState queries the "state" edge of the City entity.
func (c *City) QueryState() *StateQuery {
	return NewCityClient(c.config).QueryState(c)
}

// QueryAirports queries the "airports" edge of the City entity.
func (c *City) QueryAirports() *AirportQuery {
	return NewCityClient(c.config).QueryAirports(c)
}

// Update returns a builder for updating this City.
// Note that you need to call City.Unwrap() before calling this method if this City
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *City) Update() *CityUpdateOne {
	return NewCityClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the City entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *City) Unwrap() *City {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: City is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *City) String() string {
	var builder strings.Builder
	builder.WriteString("City(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedAirports returns the Airports named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *City) NamedAirports(name string) ([]*Airport, error) {
	if c.Edges.namedAirports == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedAirports[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *City) appendNamedAirports(name string, edges ...*Airport) {
	if c.Edges.namedAirports == nil {
		c.Edges.namedAirports = make(map[string][]*Airport)
	}
	if len(edges) == 0 {
		c.Edges.namedAirports[name] = []*Airport{}
	} else {
		c.Edges.namedAirports[name] = append(c.Edges.namedAirports[name], edges...)
	}
}

// Cities is a parsable slice of City.
type Cities []*City
