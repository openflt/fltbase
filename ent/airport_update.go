// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openflt/fltbase/ent/airport"
	"github.com/openflt/fltbase/ent/city"
	"github.com/openflt/fltbase/ent/predicate"
	"github.com/openflt/fltbase/ent/region"
	"github.com/openflt/fltbase/ent/state"
)

// AirportUpdate is the builder for updating Airport entities.
type AirportUpdate struct {
	config
	hooks    []Hook
	mutation *AirportMutation
}

// Where appends a list predicates to the AirportUpdate builder.
func (au *AirportUpdate) Where(ps ...predicate.Airport) *AirportUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetSiteID sets the "site_id" field.
func (au *AirportUpdate) SetSiteID(s string) *AirportUpdate {
	au.mutation.SetSiteID(s)
	return au
}

// SetFacilityType sets the "facility_type" field.
func (au *AirportUpdate) SetFacilityType(at airport.FacilityType) *AirportUpdate {
	au.mutation.SetFacilityType(at)
	return au
}

// SetAirportID sets the "airport_id" field.
func (au *AirportUpdate) SetAirportID(s string) *AirportUpdate {
	au.mutation.SetAirportID(s)
	return au
}

// SetAdoCode sets the "ado_code" field.
func (au *AirportUpdate) SetAdoCode(s string) *AirportUpdate {
	au.mutation.SetAdoCode(s)
	return au
}

// SetName sets the "name" field.
func (au *AirportUpdate) SetName(s string) *AirportUpdate {
	au.mutation.SetName(s)
	return au
}

// SetOwnershipType sets the "ownership_type" field.
func (au *AirportUpdate) SetOwnershipType(at airport.OwnershipType) *AirportUpdate {
	au.mutation.SetOwnershipType(at)
	return au
}

// SetUsage sets the "usage" field.
func (au *AirportUpdate) SetUsage(a airport.Usage) *AirportUpdate {
	au.mutation.SetUsage(a)
	return au
}

// SetLatitude sets the "latitude" field.
func (au *AirportUpdate) SetLatitude(f float32) *AirportUpdate {
	au.mutation.ResetLatitude()
	au.mutation.SetLatitude(f)
	return au
}

// AddLatitude adds f to the "latitude" field.
func (au *AirportUpdate) AddLatitude(f float32) *AirportUpdate {
	au.mutation.AddLatitude(f)
	return au
}

// SetLongitude sets the "longitude" field.
func (au *AirportUpdate) SetLongitude(f float32) *AirportUpdate {
	au.mutation.ResetLongitude()
	au.mutation.SetLongitude(f)
	return au
}

// AddLongitude adds f to the "longitude" field.
func (au *AirportUpdate) AddLongitude(f float32) *AirportUpdate {
	au.mutation.AddLongitude(f)
	return au
}

// SetLocationSurveyMethod sets the "location_survey_method" field.
func (au *AirportUpdate) SetLocationSurveyMethod(asm airport.LocationSurveyMethod) *AirportUpdate {
	au.mutation.SetLocationSurveyMethod(asm)
	return au
}

// SetElevation sets the "elevation" field.
func (au *AirportUpdate) SetElevation(f float32) *AirportUpdate {
	au.mutation.ResetElevation()
	au.mutation.SetElevation(f)
	return au
}

// AddElevation adds f to the "elevation" field.
func (au *AirportUpdate) AddElevation(f float32) *AirportUpdate {
	au.mutation.AddElevation(f)
	return au
}

// SetElevationSurveyMethod sets the "elevation_survey_method" field.
func (au *AirportUpdate) SetElevationSurveyMethod(asm airport.ElevationSurveyMethod) *AirportUpdate {
	au.mutation.SetElevationSurveyMethod(asm)
	return au
}

// SetMagneticVariance sets the "magnetic_variance" field.
func (au *AirportUpdate) SetMagneticVariance(i int8) *AirportUpdate {
	au.mutation.ResetMagneticVariance()
	au.mutation.SetMagneticVariance(i)
	return au
}

// AddMagneticVariance adds i to the "magnetic_variance" field.
func (au *AirportUpdate) AddMagneticVariance(i int8) *AirportUpdate {
	au.mutation.AddMagneticVariance(i)
	return au
}

// SetMagneticVarianceYear sets the "magnetic_variance_year" field.
func (au *AirportUpdate) SetMagneticVarianceYear(i int8) *AirportUpdate {
	au.mutation.ResetMagneticVarianceYear()
	au.mutation.SetMagneticVarianceYear(i)
	return au
}

// AddMagneticVarianceYear adds i to the "magnetic_variance_year" field.
func (au *AirportUpdate) AddMagneticVarianceYear(i int8) *AirportUpdate {
	au.mutation.AddMagneticVarianceYear(i)
	return au
}

// SetTrafficPatternAltitude sets the "traffic_pattern_altitude" field.
func (au *AirportUpdate) SetTrafficPatternAltitude(i int8) *AirportUpdate {
	au.mutation.ResetTrafficPatternAltitude()
	au.mutation.SetTrafficPatternAltitude(i)
	return au
}

// AddTrafficPatternAltitude adds i to the "traffic_pattern_altitude" field.
func (au *AirportUpdate) AddTrafficPatternAltitude(i int8) *AirportUpdate {
	au.mutation.AddTrafficPatternAltitude(i)
	return au
}

// SetChartName sets the "chart_name" field.
func (au *AirportUpdate) SetChartName(s string) *AirportUpdate {
	au.mutation.SetChartName(s)
	return au
}

// SetDistanceToCity sets the "distance_to_city" field.
func (au *AirportUpdate) SetDistanceToCity(u uint8) *AirportUpdate {
	au.mutation.ResetDistanceToCity()
	au.mutation.SetDistanceToCity(u)
	return au
}

// AddDistanceToCity adds u to the "distance_to_city" field.
func (au *AirportUpdate) AddDistanceToCity(u int8) *AirportUpdate {
	au.mutation.AddDistanceToCity(u)
	return au
}

// SetDirectionToCity sets the "direction_to_city" field.
func (au *AirportUpdate) SetDirectionToCity(atc airport.DirectionToCity) *AirportUpdate {
	au.mutation.SetDirectionToCity(atc)
	return au
}

// SetAcreage sets the "acreage" field.
func (au *AirportUpdate) SetAcreage(u uint8) *AirportUpdate {
	au.mutation.ResetAcreage()
	au.mutation.SetAcreage(u)
	return au
}

// AddAcreage adds u to the "acreage" field.
func (au *AirportUpdate) AddAcreage(u int8) *AirportUpdate {
	au.mutation.AddAcreage(u)
	return au
}

// SetArtccID sets the "artcc_id" field.
func (au *AirportUpdate) SetArtccID(s string) *AirportUpdate {
	au.mutation.SetArtccID(s)
	return au
}

// SetArtccName sets the "artcc_name" field.
func (au *AirportUpdate) SetArtccName(s string) *AirportUpdate {
	au.mutation.SetArtccName(s)
	return au
}

// SetComputerID sets the "computer_id" field.
func (au *AirportUpdate) SetComputerID(s string) *AirportUpdate {
	au.mutation.SetComputerID(s)
	return au
}

// SetFssOnAirport sets the "fss_on_airport" field.
func (au *AirportUpdate) SetFssOnAirport(b bool) *AirportUpdate {
	au.mutation.SetFssOnAirport(b)
	return au
}

// SetFssID sets the "fss_id" field.
func (au *AirportUpdate) SetFssID(s string) *AirportUpdate {
	au.mutation.SetFssID(s)
	return au
}

// SetFssName sets the "fss_name" field.
func (au *AirportUpdate) SetFssName(s string) *AirportUpdate {
	au.mutation.SetFssName(s)
	return au
}

// SetPhoneNumber sets the "phone_number" field.
func (au *AirportUpdate) SetPhoneNumber(s string) *AirportUpdate {
	au.mutation.SetPhoneNumber(s)
	return au
}

// SetTollFreeNumber sets the "toll_free_number" field.
func (au *AirportUpdate) SetTollFreeNumber(s string) *AirportUpdate {
	au.mutation.SetTollFreeNumber(s)
	return au
}

// SetAlternateFssID sets the "alternate_fss_id" field.
func (au *AirportUpdate) SetAlternateFssID(s string) *AirportUpdate {
	au.mutation.SetAlternateFssID(s)
	return au
}

// SetAlternateFssName sets the "alternate_fss_name" field.
func (au *AirportUpdate) SetAlternateFssName(s string) *AirportUpdate {
	au.mutation.SetAlternateFssName(s)
	return au
}

// SetAlternateTollFreeNumber sets the "alternate_toll_free_number" field.
func (au *AirportUpdate) SetAlternateTollFreeNumber(s string) *AirportUpdate {
	au.mutation.SetAlternateTollFreeNumber(s)
	return au
}

// SetNotamID sets the "notam_id" field.
func (au *AirportUpdate) SetNotamID(s string) *AirportUpdate {
	au.mutation.SetNotamID(s)
	return au
}

// SetNotamFlag sets the "notam_flag" field.
func (au *AirportUpdate) SetNotamFlag(b bool) *AirportUpdate {
	au.mutation.SetNotamFlag(b)
	return au
}

// SetActivationDate sets the "activation_date" field.
func (au *AirportUpdate) SetActivationDate(t time.Time) *AirportUpdate {
	au.mutation.SetActivationDate(t)
	return au
}

// SetStatus sets the "status" field.
func (au *AirportUpdate) SetStatus(a airport.Status) *AirportUpdate {
	au.mutation.SetStatus(a)
	return au
}

// SetStateID sets the "state" edge to the State entity by ID.
func (au *AirportUpdate) SetStateID(id int) *AirportUpdate {
	au.mutation.SetStateID(id)
	return au
}

// SetNillableStateID sets the "state" edge to the State entity by ID if the given value is not nil.
func (au *AirportUpdate) SetNillableStateID(id *int) *AirportUpdate {
	if id != nil {
		au = au.SetStateID(*id)
	}
	return au
}

// SetState sets the "state" edge to the State entity.
func (au *AirportUpdate) SetState(s *State) *AirportUpdate {
	return au.SetStateID(s.ID)
}

// SetCityID sets the "city" edge to the City entity by ID.
func (au *AirportUpdate) SetCityID(id int) *AirportUpdate {
	au.mutation.SetCityID(id)
	return au
}

// SetNillableCityID sets the "city" edge to the City entity by ID if the given value is not nil.
func (au *AirportUpdate) SetNillableCityID(id *int) *AirportUpdate {
	if id != nil {
		au = au.SetCityID(*id)
	}
	return au
}

// SetCity sets the "city" edge to the City entity.
func (au *AirportUpdate) SetCity(c *City) *AirportUpdate {
	return au.SetCityID(c.ID)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (au *AirportUpdate) SetRegionID(id int) *AirportUpdate {
	au.mutation.SetRegionID(id)
	return au
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (au *AirportUpdate) SetNillableRegionID(id *int) *AirportUpdate {
	if id != nil {
		au = au.SetRegionID(*id)
	}
	return au
}

// SetRegion sets the "region" edge to the Region entity.
func (au *AirportUpdate) SetRegion(r *Region) *AirportUpdate {
	return au.SetRegionID(r.ID)
}

// Mutation returns the AirportMutation object of the builder.
func (au *AirportUpdate) Mutation() *AirportMutation {
	return au.mutation
}

// ClearState clears the "state" edge to the State entity.
func (au *AirportUpdate) ClearState() *AirportUpdate {
	au.mutation.ClearState()
	return au
}

// ClearCity clears the "city" edge to the City entity.
func (au *AirportUpdate) ClearCity() *AirportUpdate {
	au.mutation.ClearCity()
	return au
}

// ClearRegion clears the "region" edge to the Region entity.
func (au *AirportUpdate) ClearRegion() *AirportUpdate {
	au.mutation.ClearRegion()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AirportUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AirportUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AirportUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AirportUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AirportUpdate) check() error {
	if v, ok := au.mutation.FacilityType(); ok {
		if err := airport.FacilityTypeValidator(v); err != nil {
			return &ValidationError{Name: "facility_type", err: fmt.Errorf(`ent: validator failed for field "Airport.facility_type": %w`, err)}
		}
	}
	if v, ok := au.mutation.OwnershipType(); ok {
		if err := airport.OwnershipTypeValidator(v); err != nil {
			return &ValidationError{Name: "ownership_type", err: fmt.Errorf(`ent: validator failed for field "Airport.ownership_type": %w`, err)}
		}
	}
	if v, ok := au.mutation.Usage(); ok {
		if err := airport.UsageValidator(v); err != nil {
			return &ValidationError{Name: "usage", err: fmt.Errorf(`ent: validator failed for field "Airport.usage": %w`, err)}
		}
	}
	if v, ok := au.mutation.LocationSurveyMethod(); ok {
		if err := airport.LocationSurveyMethodValidator(v); err != nil {
			return &ValidationError{Name: "location_survey_method", err: fmt.Errorf(`ent: validator failed for field "Airport.location_survey_method": %w`, err)}
		}
	}
	if v, ok := au.mutation.ElevationSurveyMethod(); ok {
		if err := airport.ElevationSurveyMethodValidator(v); err != nil {
			return &ValidationError{Name: "elevation_survey_method", err: fmt.Errorf(`ent: validator failed for field "Airport.elevation_survey_method": %w`, err)}
		}
	}
	if v, ok := au.mutation.DirectionToCity(); ok {
		if err := airport.DirectionToCityValidator(v); err != nil {
			return &ValidationError{Name: "direction_to_city", err: fmt.Errorf(`ent: validator failed for field "Airport.direction_to_city": %w`, err)}
		}
	}
	if v, ok := au.mutation.Status(); ok {
		if err := airport.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Airport.status": %w`, err)}
		}
	}
	return nil
}

func (au *AirportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(airport.Table, airport.Columns, sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.SiteID(); ok {
		_spec.SetField(airport.FieldSiteID, field.TypeString, value)
	}
	if value, ok := au.mutation.FacilityType(); ok {
		_spec.SetField(airport.FieldFacilityType, field.TypeEnum, value)
	}
	if value, ok := au.mutation.AirportID(); ok {
		_spec.SetField(airport.FieldAirportID, field.TypeString, value)
	}
	if value, ok := au.mutation.AdoCode(); ok {
		_spec.SetField(airport.FieldAdoCode, field.TypeString, value)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(airport.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.OwnershipType(); ok {
		_spec.SetField(airport.FieldOwnershipType, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Usage(); ok {
		_spec.SetField(airport.FieldUsage, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Latitude(); ok {
		_spec.SetField(airport.FieldLatitude, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.AddedLatitude(); ok {
		_spec.AddField(airport.FieldLatitude, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.Longitude(); ok {
		_spec.SetField(airport.FieldLongitude, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.AddedLongitude(); ok {
		_spec.AddField(airport.FieldLongitude, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.LocationSurveyMethod(); ok {
		_spec.SetField(airport.FieldLocationSurveyMethod, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Elevation(); ok {
		_spec.SetField(airport.FieldElevation, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.AddedElevation(); ok {
		_spec.AddField(airport.FieldElevation, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.ElevationSurveyMethod(); ok {
		_spec.SetField(airport.FieldElevationSurveyMethod, field.TypeEnum, value)
	}
	if value, ok := au.mutation.MagneticVariance(); ok {
		_spec.SetField(airport.FieldMagneticVariance, field.TypeInt8, value)
	}
	if value, ok := au.mutation.AddedMagneticVariance(); ok {
		_spec.AddField(airport.FieldMagneticVariance, field.TypeInt8, value)
	}
	if value, ok := au.mutation.MagneticVarianceYear(); ok {
		_spec.SetField(airport.FieldMagneticVarianceYear, field.TypeInt8, value)
	}
	if value, ok := au.mutation.AddedMagneticVarianceYear(); ok {
		_spec.AddField(airport.FieldMagneticVarianceYear, field.TypeInt8, value)
	}
	if value, ok := au.mutation.TrafficPatternAltitude(); ok {
		_spec.SetField(airport.FieldTrafficPatternAltitude, field.TypeInt8, value)
	}
	if value, ok := au.mutation.AddedTrafficPatternAltitude(); ok {
		_spec.AddField(airport.FieldTrafficPatternAltitude, field.TypeInt8, value)
	}
	if value, ok := au.mutation.ChartName(); ok {
		_spec.SetField(airport.FieldChartName, field.TypeString, value)
	}
	if value, ok := au.mutation.DistanceToCity(); ok {
		_spec.SetField(airport.FieldDistanceToCity, field.TypeUint8, value)
	}
	if value, ok := au.mutation.AddedDistanceToCity(); ok {
		_spec.AddField(airport.FieldDistanceToCity, field.TypeUint8, value)
	}
	if value, ok := au.mutation.DirectionToCity(); ok {
		_spec.SetField(airport.FieldDirectionToCity, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Acreage(); ok {
		_spec.SetField(airport.FieldAcreage, field.TypeUint8, value)
	}
	if value, ok := au.mutation.AddedAcreage(); ok {
		_spec.AddField(airport.FieldAcreage, field.TypeUint8, value)
	}
	if value, ok := au.mutation.ArtccID(); ok {
		_spec.SetField(airport.FieldArtccID, field.TypeString, value)
	}
	if value, ok := au.mutation.ArtccName(); ok {
		_spec.SetField(airport.FieldArtccName, field.TypeString, value)
	}
	if value, ok := au.mutation.ComputerID(); ok {
		_spec.SetField(airport.FieldComputerID, field.TypeString, value)
	}
	if value, ok := au.mutation.FssOnAirport(); ok {
		_spec.SetField(airport.FieldFssOnAirport, field.TypeBool, value)
	}
	if value, ok := au.mutation.FssID(); ok {
		_spec.SetField(airport.FieldFssID, field.TypeString, value)
	}
	if value, ok := au.mutation.FssName(); ok {
		_spec.SetField(airport.FieldFssName, field.TypeString, value)
	}
	if value, ok := au.mutation.PhoneNumber(); ok {
		_spec.SetField(airport.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := au.mutation.TollFreeNumber(); ok {
		_spec.SetField(airport.FieldTollFreeNumber, field.TypeString, value)
	}
	if value, ok := au.mutation.AlternateFssID(); ok {
		_spec.SetField(airport.FieldAlternateFssID, field.TypeString, value)
	}
	if value, ok := au.mutation.AlternateFssName(); ok {
		_spec.SetField(airport.FieldAlternateFssName, field.TypeString, value)
	}
	if value, ok := au.mutation.AlternateTollFreeNumber(); ok {
		_spec.SetField(airport.FieldAlternateTollFreeNumber, field.TypeString, value)
	}
	if value, ok := au.mutation.NotamID(); ok {
		_spec.SetField(airport.FieldNotamID, field.TypeString, value)
	}
	if value, ok := au.mutation.NotamFlag(); ok {
		_spec.SetField(airport.FieldNotamFlag, field.TypeBool, value)
	}
	if value, ok := au.mutation.ActivationDate(); ok {
		_spec.SetField(airport.FieldActivationDate, field.TypeTime, value)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(airport.FieldStatus, field.TypeEnum, value)
	}
	if au.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.StateTable,
			Columns: []string{airport.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(state.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.StateTable,
			Columns: []string{airport.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(state.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.CityTable,
			Columns: []string{airport.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.CityTable,
			Columns: []string{airport.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.RegionTable,
			Columns: []string{airport.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.RegionTable,
			Columns: []string{airport.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{airport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AirportUpdateOne is the builder for updating a single Airport entity.
type AirportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AirportMutation
}

// SetSiteID sets the "site_id" field.
func (auo *AirportUpdateOne) SetSiteID(s string) *AirportUpdateOne {
	auo.mutation.SetSiteID(s)
	return auo
}

// SetFacilityType sets the "facility_type" field.
func (auo *AirportUpdateOne) SetFacilityType(at airport.FacilityType) *AirportUpdateOne {
	auo.mutation.SetFacilityType(at)
	return auo
}

// SetAirportID sets the "airport_id" field.
func (auo *AirportUpdateOne) SetAirportID(s string) *AirportUpdateOne {
	auo.mutation.SetAirportID(s)
	return auo
}

// SetAdoCode sets the "ado_code" field.
func (auo *AirportUpdateOne) SetAdoCode(s string) *AirportUpdateOne {
	auo.mutation.SetAdoCode(s)
	return auo
}

// SetName sets the "name" field.
func (auo *AirportUpdateOne) SetName(s string) *AirportUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetOwnershipType sets the "ownership_type" field.
func (auo *AirportUpdateOne) SetOwnershipType(at airport.OwnershipType) *AirportUpdateOne {
	auo.mutation.SetOwnershipType(at)
	return auo
}

// SetUsage sets the "usage" field.
func (auo *AirportUpdateOne) SetUsage(a airport.Usage) *AirportUpdateOne {
	auo.mutation.SetUsage(a)
	return auo
}

// SetLatitude sets the "latitude" field.
func (auo *AirportUpdateOne) SetLatitude(f float32) *AirportUpdateOne {
	auo.mutation.ResetLatitude()
	auo.mutation.SetLatitude(f)
	return auo
}

// AddLatitude adds f to the "latitude" field.
func (auo *AirportUpdateOne) AddLatitude(f float32) *AirportUpdateOne {
	auo.mutation.AddLatitude(f)
	return auo
}

// SetLongitude sets the "longitude" field.
func (auo *AirportUpdateOne) SetLongitude(f float32) *AirportUpdateOne {
	auo.mutation.ResetLongitude()
	auo.mutation.SetLongitude(f)
	return auo
}

// AddLongitude adds f to the "longitude" field.
func (auo *AirportUpdateOne) AddLongitude(f float32) *AirportUpdateOne {
	auo.mutation.AddLongitude(f)
	return auo
}

// SetLocationSurveyMethod sets the "location_survey_method" field.
func (auo *AirportUpdateOne) SetLocationSurveyMethod(asm airport.LocationSurveyMethod) *AirportUpdateOne {
	auo.mutation.SetLocationSurveyMethod(asm)
	return auo
}

// SetElevation sets the "elevation" field.
func (auo *AirportUpdateOne) SetElevation(f float32) *AirportUpdateOne {
	auo.mutation.ResetElevation()
	auo.mutation.SetElevation(f)
	return auo
}

// AddElevation adds f to the "elevation" field.
func (auo *AirportUpdateOne) AddElevation(f float32) *AirportUpdateOne {
	auo.mutation.AddElevation(f)
	return auo
}

// SetElevationSurveyMethod sets the "elevation_survey_method" field.
func (auo *AirportUpdateOne) SetElevationSurveyMethod(asm airport.ElevationSurveyMethod) *AirportUpdateOne {
	auo.mutation.SetElevationSurveyMethod(asm)
	return auo
}

// SetMagneticVariance sets the "magnetic_variance" field.
func (auo *AirportUpdateOne) SetMagneticVariance(i int8) *AirportUpdateOne {
	auo.mutation.ResetMagneticVariance()
	auo.mutation.SetMagneticVariance(i)
	return auo
}

// AddMagneticVariance adds i to the "magnetic_variance" field.
func (auo *AirportUpdateOne) AddMagneticVariance(i int8) *AirportUpdateOne {
	auo.mutation.AddMagneticVariance(i)
	return auo
}

// SetMagneticVarianceYear sets the "magnetic_variance_year" field.
func (auo *AirportUpdateOne) SetMagneticVarianceYear(i int8) *AirportUpdateOne {
	auo.mutation.ResetMagneticVarianceYear()
	auo.mutation.SetMagneticVarianceYear(i)
	return auo
}

// AddMagneticVarianceYear adds i to the "magnetic_variance_year" field.
func (auo *AirportUpdateOne) AddMagneticVarianceYear(i int8) *AirportUpdateOne {
	auo.mutation.AddMagneticVarianceYear(i)
	return auo
}

// SetTrafficPatternAltitude sets the "traffic_pattern_altitude" field.
func (auo *AirportUpdateOne) SetTrafficPatternAltitude(i int8) *AirportUpdateOne {
	auo.mutation.ResetTrafficPatternAltitude()
	auo.mutation.SetTrafficPatternAltitude(i)
	return auo
}

// AddTrafficPatternAltitude adds i to the "traffic_pattern_altitude" field.
func (auo *AirportUpdateOne) AddTrafficPatternAltitude(i int8) *AirportUpdateOne {
	auo.mutation.AddTrafficPatternAltitude(i)
	return auo
}

// SetChartName sets the "chart_name" field.
func (auo *AirportUpdateOne) SetChartName(s string) *AirportUpdateOne {
	auo.mutation.SetChartName(s)
	return auo
}

// SetDistanceToCity sets the "distance_to_city" field.
func (auo *AirportUpdateOne) SetDistanceToCity(u uint8) *AirportUpdateOne {
	auo.mutation.ResetDistanceToCity()
	auo.mutation.SetDistanceToCity(u)
	return auo
}

// AddDistanceToCity adds u to the "distance_to_city" field.
func (auo *AirportUpdateOne) AddDistanceToCity(u int8) *AirportUpdateOne {
	auo.mutation.AddDistanceToCity(u)
	return auo
}

// SetDirectionToCity sets the "direction_to_city" field.
func (auo *AirportUpdateOne) SetDirectionToCity(atc airport.DirectionToCity) *AirportUpdateOne {
	auo.mutation.SetDirectionToCity(atc)
	return auo
}

// SetAcreage sets the "acreage" field.
func (auo *AirportUpdateOne) SetAcreage(u uint8) *AirportUpdateOne {
	auo.mutation.ResetAcreage()
	auo.mutation.SetAcreage(u)
	return auo
}

// AddAcreage adds u to the "acreage" field.
func (auo *AirportUpdateOne) AddAcreage(u int8) *AirportUpdateOne {
	auo.mutation.AddAcreage(u)
	return auo
}

// SetArtccID sets the "artcc_id" field.
func (auo *AirportUpdateOne) SetArtccID(s string) *AirportUpdateOne {
	auo.mutation.SetArtccID(s)
	return auo
}

// SetArtccName sets the "artcc_name" field.
func (auo *AirportUpdateOne) SetArtccName(s string) *AirportUpdateOne {
	auo.mutation.SetArtccName(s)
	return auo
}

// SetComputerID sets the "computer_id" field.
func (auo *AirportUpdateOne) SetComputerID(s string) *AirportUpdateOne {
	auo.mutation.SetComputerID(s)
	return auo
}

// SetFssOnAirport sets the "fss_on_airport" field.
func (auo *AirportUpdateOne) SetFssOnAirport(b bool) *AirportUpdateOne {
	auo.mutation.SetFssOnAirport(b)
	return auo
}

// SetFssID sets the "fss_id" field.
func (auo *AirportUpdateOne) SetFssID(s string) *AirportUpdateOne {
	auo.mutation.SetFssID(s)
	return auo
}

// SetFssName sets the "fss_name" field.
func (auo *AirportUpdateOne) SetFssName(s string) *AirportUpdateOne {
	auo.mutation.SetFssName(s)
	return auo
}

// SetPhoneNumber sets the "phone_number" field.
func (auo *AirportUpdateOne) SetPhoneNumber(s string) *AirportUpdateOne {
	auo.mutation.SetPhoneNumber(s)
	return auo
}

// SetTollFreeNumber sets the "toll_free_number" field.
func (auo *AirportUpdateOne) SetTollFreeNumber(s string) *AirportUpdateOne {
	auo.mutation.SetTollFreeNumber(s)
	return auo
}

// SetAlternateFssID sets the "alternate_fss_id" field.
func (auo *AirportUpdateOne) SetAlternateFssID(s string) *AirportUpdateOne {
	auo.mutation.SetAlternateFssID(s)
	return auo
}

// SetAlternateFssName sets the "alternate_fss_name" field.
func (auo *AirportUpdateOne) SetAlternateFssName(s string) *AirportUpdateOne {
	auo.mutation.SetAlternateFssName(s)
	return auo
}

// SetAlternateTollFreeNumber sets the "alternate_toll_free_number" field.
func (auo *AirportUpdateOne) SetAlternateTollFreeNumber(s string) *AirportUpdateOne {
	auo.mutation.SetAlternateTollFreeNumber(s)
	return auo
}

// SetNotamID sets the "notam_id" field.
func (auo *AirportUpdateOne) SetNotamID(s string) *AirportUpdateOne {
	auo.mutation.SetNotamID(s)
	return auo
}

// SetNotamFlag sets the "notam_flag" field.
func (auo *AirportUpdateOne) SetNotamFlag(b bool) *AirportUpdateOne {
	auo.mutation.SetNotamFlag(b)
	return auo
}

// SetActivationDate sets the "activation_date" field.
func (auo *AirportUpdateOne) SetActivationDate(t time.Time) *AirportUpdateOne {
	auo.mutation.SetActivationDate(t)
	return auo
}

// SetStatus sets the "status" field.
func (auo *AirportUpdateOne) SetStatus(a airport.Status) *AirportUpdateOne {
	auo.mutation.SetStatus(a)
	return auo
}

// SetStateID sets the "state" edge to the State entity by ID.
func (auo *AirportUpdateOne) SetStateID(id int) *AirportUpdateOne {
	auo.mutation.SetStateID(id)
	return auo
}

// SetNillableStateID sets the "state" edge to the State entity by ID if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableStateID(id *int) *AirportUpdateOne {
	if id != nil {
		auo = auo.SetStateID(*id)
	}
	return auo
}

// SetState sets the "state" edge to the State entity.
func (auo *AirportUpdateOne) SetState(s *State) *AirportUpdateOne {
	return auo.SetStateID(s.ID)
}

// SetCityID sets the "city" edge to the City entity by ID.
func (auo *AirportUpdateOne) SetCityID(id int) *AirportUpdateOne {
	auo.mutation.SetCityID(id)
	return auo
}

// SetNillableCityID sets the "city" edge to the City entity by ID if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableCityID(id *int) *AirportUpdateOne {
	if id != nil {
		auo = auo.SetCityID(*id)
	}
	return auo
}

// SetCity sets the "city" edge to the City entity.
func (auo *AirportUpdateOne) SetCity(c *City) *AirportUpdateOne {
	return auo.SetCityID(c.ID)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (auo *AirportUpdateOne) SetRegionID(id int) *AirportUpdateOne {
	auo.mutation.SetRegionID(id)
	return auo
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (auo *AirportUpdateOne) SetNillableRegionID(id *int) *AirportUpdateOne {
	if id != nil {
		auo = auo.SetRegionID(*id)
	}
	return auo
}

// SetRegion sets the "region" edge to the Region entity.
func (auo *AirportUpdateOne) SetRegion(r *Region) *AirportUpdateOne {
	return auo.SetRegionID(r.ID)
}

// Mutation returns the AirportMutation object of the builder.
func (auo *AirportUpdateOne) Mutation() *AirportMutation {
	return auo.mutation
}

// ClearState clears the "state" edge to the State entity.
func (auo *AirportUpdateOne) ClearState() *AirportUpdateOne {
	auo.mutation.ClearState()
	return auo
}

// ClearCity clears the "city" edge to the City entity.
func (auo *AirportUpdateOne) ClearCity() *AirportUpdateOne {
	auo.mutation.ClearCity()
	return auo
}

// ClearRegion clears the "region" edge to the Region entity.
func (auo *AirportUpdateOne) ClearRegion() *AirportUpdateOne {
	auo.mutation.ClearRegion()
	return auo
}

// Where appends a list predicates to the AirportUpdate builder.
func (auo *AirportUpdateOne) Where(ps ...predicate.Airport) *AirportUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AirportUpdateOne) Select(field string, fields ...string) *AirportUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Airport entity.
func (auo *AirportUpdateOne) Save(ctx context.Context) (*Airport, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AirportUpdateOne) SaveX(ctx context.Context) *Airport {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AirportUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AirportUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AirportUpdateOne) check() error {
	if v, ok := auo.mutation.FacilityType(); ok {
		if err := airport.FacilityTypeValidator(v); err != nil {
			return &ValidationError{Name: "facility_type", err: fmt.Errorf(`ent: validator failed for field "Airport.facility_type": %w`, err)}
		}
	}
	if v, ok := auo.mutation.OwnershipType(); ok {
		if err := airport.OwnershipTypeValidator(v); err != nil {
			return &ValidationError{Name: "ownership_type", err: fmt.Errorf(`ent: validator failed for field "Airport.ownership_type": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Usage(); ok {
		if err := airport.UsageValidator(v); err != nil {
			return &ValidationError{Name: "usage", err: fmt.Errorf(`ent: validator failed for field "Airport.usage": %w`, err)}
		}
	}
	if v, ok := auo.mutation.LocationSurveyMethod(); ok {
		if err := airport.LocationSurveyMethodValidator(v); err != nil {
			return &ValidationError{Name: "location_survey_method", err: fmt.Errorf(`ent: validator failed for field "Airport.location_survey_method": %w`, err)}
		}
	}
	if v, ok := auo.mutation.ElevationSurveyMethod(); ok {
		if err := airport.ElevationSurveyMethodValidator(v); err != nil {
			return &ValidationError{Name: "elevation_survey_method", err: fmt.Errorf(`ent: validator failed for field "Airport.elevation_survey_method": %w`, err)}
		}
	}
	if v, ok := auo.mutation.DirectionToCity(); ok {
		if err := airport.DirectionToCityValidator(v); err != nil {
			return &ValidationError{Name: "direction_to_city", err: fmt.Errorf(`ent: validator failed for field "Airport.direction_to_city": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Status(); ok {
		if err := airport.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Airport.status": %w`, err)}
		}
	}
	return nil
}

func (auo *AirportUpdateOne) sqlSave(ctx context.Context) (_node *Airport, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(airport.Table, airport.Columns, sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Airport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, airport.FieldID)
		for _, f := range fields {
			if !airport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != airport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.SiteID(); ok {
		_spec.SetField(airport.FieldSiteID, field.TypeString, value)
	}
	if value, ok := auo.mutation.FacilityType(); ok {
		_spec.SetField(airport.FieldFacilityType, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.AirportID(); ok {
		_spec.SetField(airport.FieldAirportID, field.TypeString, value)
	}
	if value, ok := auo.mutation.AdoCode(); ok {
		_spec.SetField(airport.FieldAdoCode, field.TypeString, value)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(airport.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.OwnershipType(); ok {
		_spec.SetField(airport.FieldOwnershipType, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Usage(); ok {
		_spec.SetField(airport.FieldUsage, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Latitude(); ok {
		_spec.SetField(airport.FieldLatitude, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.AddedLatitude(); ok {
		_spec.AddField(airport.FieldLatitude, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.Longitude(); ok {
		_spec.SetField(airport.FieldLongitude, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.AddedLongitude(); ok {
		_spec.AddField(airport.FieldLongitude, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.LocationSurveyMethod(); ok {
		_spec.SetField(airport.FieldLocationSurveyMethod, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Elevation(); ok {
		_spec.SetField(airport.FieldElevation, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.AddedElevation(); ok {
		_spec.AddField(airport.FieldElevation, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.ElevationSurveyMethod(); ok {
		_spec.SetField(airport.FieldElevationSurveyMethod, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.MagneticVariance(); ok {
		_spec.SetField(airport.FieldMagneticVariance, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.AddedMagneticVariance(); ok {
		_spec.AddField(airport.FieldMagneticVariance, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.MagneticVarianceYear(); ok {
		_spec.SetField(airport.FieldMagneticVarianceYear, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.AddedMagneticVarianceYear(); ok {
		_spec.AddField(airport.FieldMagneticVarianceYear, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.TrafficPatternAltitude(); ok {
		_spec.SetField(airport.FieldTrafficPatternAltitude, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.AddedTrafficPatternAltitude(); ok {
		_spec.AddField(airport.FieldTrafficPatternAltitude, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.ChartName(); ok {
		_spec.SetField(airport.FieldChartName, field.TypeString, value)
	}
	if value, ok := auo.mutation.DistanceToCity(); ok {
		_spec.SetField(airport.FieldDistanceToCity, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.AddedDistanceToCity(); ok {
		_spec.AddField(airport.FieldDistanceToCity, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.DirectionToCity(); ok {
		_spec.SetField(airport.FieldDirectionToCity, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Acreage(); ok {
		_spec.SetField(airport.FieldAcreage, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.AddedAcreage(); ok {
		_spec.AddField(airport.FieldAcreage, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.ArtccID(); ok {
		_spec.SetField(airport.FieldArtccID, field.TypeString, value)
	}
	if value, ok := auo.mutation.ArtccName(); ok {
		_spec.SetField(airport.FieldArtccName, field.TypeString, value)
	}
	if value, ok := auo.mutation.ComputerID(); ok {
		_spec.SetField(airport.FieldComputerID, field.TypeString, value)
	}
	if value, ok := auo.mutation.FssOnAirport(); ok {
		_spec.SetField(airport.FieldFssOnAirport, field.TypeBool, value)
	}
	if value, ok := auo.mutation.FssID(); ok {
		_spec.SetField(airport.FieldFssID, field.TypeString, value)
	}
	if value, ok := auo.mutation.FssName(); ok {
		_spec.SetField(airport.FieldFssName, field.TypeString, value)
	}
	if value, ok := auo.mutation.PhoneNumber(); ok {
		_spec.SetField(airport.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := auo.mutation.TollFreeNumber(); ok {
		_spec.SetField(airport.FieldTollFreeNumber, field.TypeString, value)
	}
	if value, ok := auo.mutation.AlternateFssID(); ok {
		_spec.SetField(airport.FieldAlternateFssID, field.TypeString, value)
	}
	if value, ok := auo.mutation.AlternateFssName(); ok {
		_spec.SetField(airport.FieldAlternateFssName, field.TypeString, value)
	}
	if value, ok := auo.mutation.AlternateTollFreeNumber(); ok {
		_spec.SetField(airport.FieldAlternateTollFreeNumber, field.TypeString, value)
	}
	if value, ok := auo.mutation.NotamID(); ok {
		_spec.SetField(airport.FieldNotamID, field.TypeString, value)
	}
	if value, ok := auo.mutation.NotamFlag(); ok {
		_spec.SetField(airport.FieldNotamFlag, field.TypeBool, value)
	}
	if value, ok := auo.mutation.ActivationDate(); ok {
		_spec.SetField(airport.FieldActivationDate, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(airport.FieldStatus, field.TypeEnum, value)
	}
	if auo.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.StateTable,
			Columns: []string{airport.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(state.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.StateTable,
			Columns: []string{airport.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(state.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.CityTable,
			Columns: []string{airport.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.CityTable,
			Columns: []string{airport.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.RegionTable,
			Columns: []string{airport.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.RegionTable,
			Columns: []string{airport.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Airport{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{airport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
