// Code generated by ent, DO NOT EDIT.

package region

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the region type in the database.
	Label = "region"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeAirports holds the string denoting the airports edge name in mutations.
	EdgeAirports = "airports"
	// Table holds the table name of the region in the database.
	Table = "regions"
	// AirportsTable is the table that holds the airports relation/edge.
	AirportsTable = "airports"
	// AirportsInverseTable is the table name for the Airport entity.
	// It exists in this package in order to avoid circular dependency with the "airport" package.
	AirportsInverseTable = "airports"
	// AirportsColumn is the table column denoting the airports relation/edge.
	AirportsColumn = "region_airports"
)

// Columns holds all SQL columns for region fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Region queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAirportsCount orders the results by airports count.
func ByAirportsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAirportsStep(), opts...)
	}
}

// ByAirports orders the results by airports terms.
func ByAirports(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAirportsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAirportsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AirportsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AirportsTable, AirportsColumn),
	)
}
