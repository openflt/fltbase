// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openflt/fltbase/ent/airport"
	"github.com/openflt/fltbase/ent/city"
	"github.com/openflt/fltbase/ent/region"
	"github.com/openflt/fltbase/ent/state"
)

// Airport is the model entity for the Airport schema.
type Airport struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SiteID holds the value of the "site_id" field.
	SiteID string `json:"site_id,omitempty"`
	// FacilityType holds the value of the "facility_type" field.
	FacilityType airport.FacilityType `json:"facility_type,omitempty"`
	// FAA Airport Identifier, 3-4 characters (e.g. ORD, AL03)
	AirportID string `json:"airport_id,omitempty"`
	// FAA District Office Code (e.g. DCA, TEC, MEM)
	AdoCode string `json:"ado_code,omitempty"`
	// Common name for airport (e.g. Gifford Fld)
	Name string `json:"name,omitempty"`
	// OwnershipType holds the value of the "ownership_type" field.
	OwnershipType airport.OwnershipType `json:"ownership_type,omitempty"`
	// Usage holds the value of the "usage" field.
	Usage airport.Usage `json:"usage,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float32 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float32 `json:"longitude,omitempty"`
	// LocationSurveyMethod holds the value of the "location_survey_method" field.
	LocationSurveyMethod airport.LocationSurveyMethod `json:"location_survey_method,omitempty"`
	// Elevation holds the value of the "elevation" field.
	Elevation float32 `json:"elevation,omitempty"`
	// ElevationSurveyMethod holds the value of the "elevation_survey_method" field.
	ElevationSurveyMethod airport.ElevationSurveyMethod `json:"elevation_survey_method,omitempty"`
	// MagneticVariance holds the value of the "magnetic_variance" field.
	MagneticVariance int8 `json:"magnetic_variance,omitempty"`
	// Magnetic variation epoch year
	MagneticVarianceYear int8 `json:"magnetic_variance_year,omitempty"`
	// TrafficPatternAltitude holds the value of the "traffic_pattern_altitude" field.
	TrafficPatternAltitude int8 `json:"traffic_pattern_altitude,omitempty"`
	// ChartName holds the value of the "chart_name" field.
	ChartName string `json:"chart_name,omitempty"`
	// DistanceToCity holds the value of the "distance_to_city" field.
	DistanceToCity uint8 `json:"distance_to_city,omitempty"`
	// DirectionToCity holds the value of the "direction_to_city" field.
	DirectionToCity airport.DirectionToCity `json:"direction_to_city,omitempty"`
	// Acreage holds the value of the "acreage" field.
	Acreage uint8 `json:"acreage,omitempty"`
	// ArtccID holds the value of the "artcc_id" field.
	ArtccID string `json:"artcc_id,omitempty"`
	// ArtccName holds the value of the "artcc_name" field.
	ArtccName string `json:"artcc_name,omitempty"`
	// ComputerID holds the value of the "computer_id" field.
	ComputerID string `json:"computer_id,omitempty"`
	// Tie-In FSS Physically Located on Facility
	FssOnAirport bool `json:"fss_on_airport,omitempty"`
	// FssID holds the value of the "fss_id" field.
	FssID string `json:"fss_id,omitempty"`
	// FssName holds the value of the "fss_name" field.
	FssName string `json:"fss_name,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// TollFreeNumber holds the value of the "toll_free_number" field.
	TollFreeNumber string `json:"toll_free_number,omitempty"`
	// AlternateFssID holds the value of the "alternate_fss_id" field.
	AlternateFssID string `json:"alternate_fss_id,omitempty"`
	// AlternateFssName holds the value of the "alternate_fss_name" field.
	AlternateFssName string `json:"alternate_fss_name,omitempty"`
	// AlternateTollFreeNumber holds the value of the "alternate_toll_free_number" field.
	AlternateTollFreeNumber string `json:"alternate_toll_free_number,omitempty"`
	// NotamID holds the value of the "notam_id" field.
	NotamID string `json:"notam_id,omitempty"`
	// Availability of NOTAM 'D' Service at Airport
	NotamFlag bool `json:"notam_flag,omitempty"`
	// ActivationDate holds the value of the "activation_date" field.
	ActivationDate time.Time `json:"activation_date,omitempty"`
	// Status holds the value of the "status" field.
	Status airport.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AirportQuery when eager-loading is set.
	Edges           AirportEdges `json:"edges"`
	city_airports   *int
	region_airports *int
	state_airports  *int
	selectValues    sql.SelectValues
}

// AirportEdges holds the relations/edges for other nodes in the graph.
type AirportEdges struct {
	// State holds the value of the state edge.
	State *State `json:"state,omitempty"`
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Region holds the value of the region edge.
	Region *Region `json:"region,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// StateOrErr returns the State value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AirportEdges) StateOrErr() (*State, error) {
	if e.loadedTypes[0] {
		if e.State == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: state.Label}
		}
		return e.State, nil
	}
	return nil, &NotLoadedError{edge: "state"}
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AirportEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[1] {
		if e.City == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// RegionOrErr returns the Region value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AirportEdges) RegionOrErr() (*Region, error) {
	if e.loadedTypes[2] {
		if e.Region == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: region.Label}
		}
		return e.Region, nil
	}
	return nil, &NotLoadedError{edge: "region"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Airport) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case airport.FieldFssOnAirport, airport.FieldNotamFlag:
			values[i] = new(sql.NullBool)
		case airport.FieldLatitude, airport.FieldLongitude, airport.FieldElevation:
			values[i] = new(sql.NullFloat64)
		case airport.FieldID, airport.FieldMagneticVariance, airport.FieldMagneticVarianceYear, airport.FieldTrafficPatternAltitude, airport.FieldDistanceToCity, airport.FieldAcreage:
			values[i] = new(sql.NullInt64)
		case airport.FieldSiteID, airport.FieldFacilityType, airport.FieldAirportID, airport.FieldAdoCode, airport.FieldName, airport.FieldOwnershipType, airport.FieldUsage, airport.FieldLocationSurveyMethod, airport.FieldElevationSurveyMethod, airport.FieldChartName, airport.FieldDirectionToCity, airport.FieldArtccID, airport.FieldArtccName, airport.FieldComputerID, airport.FieldFssID, airport.FieldFssName, airport.FieldPhoneNumber, airport.FieldTollFreeNumber, airport.FieldAlternateFssID, airport.FieldAlternateFssName, airport.FieldAlternateTollFreeNumber, airport.FieldNotamID, airport.FieldStatus:
			values[i] = new(sql.NullString)
		case airport.FieldActivationDate:
			values[i] = new(sql.NullTime)
		case airport.ForeignKeys[0]: // city_airports
			values[i] = new(sql.NullInt64)
		case airport.ForeignKeys[1]: // region_airports
			values[i] = new(sql.NullInt64)
		case airport.ForeignKeys[2]: // state_airports
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Airport fields.
func (a *Airport) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case airport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case airport.FieldSiteID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site_id", values[i])
			} else if value.Valid {
				a.SiteID = value.String
			}
		case airport.FieldFacilityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field facility_type", values[i])
			} else if value.Valid {
				a.FacilityType = airport.FacilityType(value.String)
			}
		case airport.FieldAirportID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field airport_id", values[i])
			} else if value.Valid {
				a.AirportID = value.String
			}
		case airport.FieldAdoCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ado_code", values[i])
			} else if value.Valid {
				a.AdoCode = value.String
			}
		case airport.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case airport.FieldOwnershipType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ownership_type", values[i])
			} else if value.Valid {
				a.OwnershipType = airport.OwnershipType(value.String)
			}
		case airport.FieldUsage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field usage", values[i])
			} else if value.Valid {
				a.Usage = airport.Usage(value.String)
			}
		case airport.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				a.Latitude = float32(value.Float64)
			}
		case airport.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				a.Longitude = float32(value.Float64)
			}
		case airport.FieldLocationSurveyMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location_survey_method", values[i])
			} else if value.Valid {
				a.LocationSurveyMethod = airport.LocationSurveyMethod(value.String)
			}
		case airport.FieldElevation:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field elevation", values[i])
			} else if value.Valid {
				a.Elevation = float32(value.Float64)
			}
		case airport.FieldElevationSurveyMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field elevation_survey_method", values[i])
			} else if value.Valid {
				a.ElevationSurveyMethod = airport.ElevationSurveyMethod(value.String)
			}
		case airport.FieldMagneticVariance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field magnetic_variance", values[i])
			} else if value.Valid {
				a.MagneticVariance = int8(value.Int64)
			}
		case airport.FieldMagneticVarianceYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field magnetic_variance_year", values[i])
			} else if value.Valid {
				a.MagneticVarianceYear = int8(value.Int64)
			}
		case airport.FieldTrafficPatternAltitude:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field traffic_pattern_altitude", values[i])
			} else if value.Valid {
				a.TrafficPatternAltitude = int8(value.Int64)
			}
		case airport.FieldChartName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chart_name", values[i])
			} else if value.Valid {
				a.ChartName = value.String
			}
		case airport.FieldDistanceToCity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field distance_to_city", values[i])
			} else if value.Valid {
				a.DistanceToCity = uint8(value.Int64)
			}
		case airport.FieldDirectionToCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field direction_to_city", values[i])
			} else if value.Valid {
				a.DirectionToCity = airport.DirectionToCity(value.String)
			}
		case airport.FieldAcreage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field acreage", values[i])
			} else if value.Valid {
				a.Acreage = uint8(value.Int64)
			}
		case airport.FieldArtccID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artcc_id", values[i])
			} else if value.Valid {
				a.ArtccID = value.String
			}
		case airport.FieldArtccName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artcc_name", values[i])
			} else if value.Valid {
				a.ArtccName = value.String
			}
		case airport.FieldComputerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field computer_id", values[i])
			} else if value.Valid {
				a.ComputerID = value.String
			}
		case airport.FieldFssOnAirport:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field fss_on_airport", values[i])
			} else if value.Valid {
				a.FssOnAirport = value.Bool
			}
		case airport.FieldFssID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fss_id", values[i])
			} else if value.Valid {
				a.FssID = value.String
			}
		case airport.FieldFssName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fss_name", values[i])
			} else if value.Valid {
				a.FssName = value.String
			}
		case airport.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				a.PhoneNumber = value.String
			}
		case airport.FieldTollFreeNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field toll_free_number", values[i])
			} else if value.Valid {
				a.TollFreeNumber = value.String
			}
		case airport.FieldAlternateFssID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alternate_fss_id", values[i])
			} else if value.Valid {
				a.AlternateFssID = value.String
			}
		case airport.FieldAlternateFssName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alternate_fss_name", values[i])
			} else if value.Valid {
				a.AlternateFssName = value.String
			}
		case airport.FieldAlternateTollFreeNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alternate_toll_free_number", values[i])
			} else if value.Valid {
				a.AlternateTollFreeNumber = value.String
			}
		case airport.FieldNotamID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notam_id", values[i])
			} else if value.Valid {
				a.NotamID = value.String
			}
		case airport.FieldNotamFlag:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field notam_flag", values[i])
			} else if value.Valid {
				a.NotamFlag = value.Bool
			}
		case airport.FieldActivationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activation_date", values[i])
			} else if value.Valid {
				a.ActivationDate = value.Time
			}
		case airport.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = airport.Status(value.String)
			}
		case airport.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field city_airports", value)
			} else if value.Valid {
				a.city_airports = new(int)
				*a.city_airports = int(value.Int64)
			}
		case airport.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field region_airports", value)
			} else if value.Valid {
				a.region_airports = new(int)
				*a.region_airports = int(value.Int64)
			}
		case airport.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field state_airports", value)
			} else if value.Valid {
				a.state_airports = new(int)
				*a.state_airports = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Airport.
// This includes values selected through modifiers, order, etc.
func (a *Airport) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryState queries the "state" edge of the Airport entity.
func (a *Airport) QueryState() *StateQuery {
	return NewAirportClient(a.config).QueryState(a)
}

// QueryCity queries the "city" edge of the Airport entity.
func (a *Airport) QueryCity() *CityQuery {
	return NewAirportClient(a.config).QueryCity(a)
}

// QueryRegion queries the "region" edge of the Airport entity.
func (a *Airport) QueryRegion() *RegionQuery {
	return NewAirportClient(a.config).QueryRegion(a)
}

// Update returns a builder for updating this Airport.
// Note that you need to call Airport.Unwrap() before calling this method if this Airport
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Airport) Update() *AirportUpdateOne {
	return NewAirportClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Airport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Airport) Unwrap() *Airport {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Airport is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Airport) String() string {
	var builder strings.Builder
	builder.WriteString("Airport(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("site_id=")
	builder.WriteString(a.SiteID)
	builder.WriteString(", ")
	builder.WriteString("facility_type=")
	builder.WriteString(fmt.Sprintf("%v", a.FacilityType))
	builder.WriteString(", ")
	builder.WriteString("airport_id=")
	builder.WriteString(a.AirportID)
	builder.WriteString(", ")
	builder.WriteString("ado_code=")
	builder.WriteString(a.AdoCode)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("ownership_type=")
	builder.WriteString(fmt.Sprintf("%v", a.OwnershipType))
	builder.WriteString(", ")
	builder.WriteString("usage=")
	builder.WriteString(fmt.Sprintf("%v", a.Usage))
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", a.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", a.Longitude))
	builder.WriteString(", ")
	builder.WriteString("location_survey_method=")
	builder.WriteString(fmt.Sprintf("%v", a.LocationSurveyMethod))
	builder.WriteString(", ")
	builder.WriteString("elevation=")
	builder.WriteString(fmt.Sprintf("%v", a.Elevation))
	builder.WriteString(", ")
	builder.WriteString("elevation_survey_method=")
	builder.WriteString(fmt.Sprintf("%v", a.ElevationSurveyMethod))
	builder.WriteString(", ")
	builder.WriteString("magnetic_variance=")
	builder.WriteString(fmt.Sprintf("%v", a.MagneticVariance))
	builder.WriteString(", ")
	builder.WriteString("magnetic_variance_year=")
	builder.WriteString(fmt.Sprintf("%v", a.MagneticVarianceYear))
	builder.WriteString(", ")
	builder.WriteString("traffic_pattern_altitude=")
	builder.WriteString(fmt.Sprintf("%v", a.TrafficPatternAltitude))
	builder.WriteString(", ")
	builder.WriteString("chart_name=")
	builder.WriteString(a.ChartName)
	builder.WriteString(", ")
	builder.WriteString("distance_to_city=")
	builder.WriteString(fmt.Sprintf("%v", a.DistanceToCity))
	builder.WriteString(", ")
	builder.WriteString("direction_to_city=")
	builder.WriteString(fmt.Sprintf("%v", a.DirectionToCity))
	builder.WriteString(", ")
	builder.WriteString("acreage=")
	builder.WriteString(fmt.Sprintf("%v", a.Acreage))
	builder.WriteString(", ")
	builder.WriteString("artcc_id=")
	builder.WriteString(a.ArtccID)
	builder.WriteString(", ")
	builder.WriteString("artcc_name=")
	builder.WriteString(a.ArtccName)
	builder.WriteString(", ")
	builder.WriteString("computer_id=")
	builder.WriteString(a.ComputerID)
	builder.WriteString(", ")
	builder.WriteString("fss_on_airport=")
	builder.WriteString(fmt.Sprintf("%v", a.FssOnAirport))
	builder.WriteString(", ")
	builder.WriteString("fss_id=")
	builder.WriteString(a.FssID)
	builder.WriteString(", ")
	builder.WriteString("fss_name=")
	builder.WriteString(a.FssName)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(a.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("toll_free_number=")
	builder.WriteString(a.TollFreeNumber)
	builder.WriteString(", ")
	builder.WriteString("alternate_fss_id=")
	builder.WriteString(a.AlternateFssID)
	builder.WriteString(", ")
	builder.WriteString("alternate_fss_name=")
	builder.WriteString(a.AlternateFssName)
	builder.WriteString(", ")
	builder.WriteString("alternate_toll_free_number=")
	builder.WriteString(a.AlternateTollFreeNumber)
	builder.WriteString(", ")
	builder.WriteString("notam_id=")
	builder.WriteString(a.NotamID)
	builder.WriteString(", ")
	builder.WriteString("notam_flag=")
	builder.WriteString(fmt.Sprintf("%v", a.NotamFlag))
	builder.WriteString(", ")
	builder.WriteString("activation_date=")
	builder.WriteString(a.ActivationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Airports is a parsable slice of Airport.
type Airports []*Airport
