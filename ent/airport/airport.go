// Code generated by ent, DO NOT EDIT.

package airport

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the airport type in the database.
	Label = "airport"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSiteID holds the string denoting the site_id field in the database.
	FieldSiteID = "site_id"
	// FieldFacilityType holds the string denoting the facility_type field in the database.
	FieldFacilityType = "facility_type"
	// FieldAirportID holds the string denoting the airport_id field in the database.
	FieldAirportID = "airport_id"
	// FieldAdoCode holds the string denoting the ado_code field in the database.
	FieldAdoCode = "ado_code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOwnershipType holds the string denoting the ownership_type field in the database.
	FieldOwnershipType = "ownership_type"
	// FieldUsage holds the string denoting the usage field in the database.
	FieldUsage = "usage"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldLocationSurveyMethod holds the string denoting the location_survey_method field in the database.
	FieldLocationSurveyMethod = "location_survey_method"
	// FieldElevation holds the string denoting the elevation field in the database.
	FieldElevation = "elevation"
	// FieldElevationSurveyMethod holds the string denoting the elevation_survey_method field in the database.
	FieldElevationSurveyMethod = "elevation_survey_method"
	// FieldMagneticVariance holds the string denoting the magnetic_variance field in the database.
	FieldMagneticVariance = "magnetic_variance"
	// FieldMagneticVarianceYear holds the string denoting the magnetic_variance_year field in the database.
	FieldMagneticVarianceYear = "magnetic_variance_year"
	// FieldTrafficPatternAltitude holds the string denoting the traffic_pattern_altitude field in the database.
	FieldTrafficPatternAltitude = "traffic_pattern_altitude"
	// FieldChartName holds the string denoting the chart_name field in the database.
	FieldChartName = "chart_name"
	// FieldDistanceToCity holds the string denoting the distance_to_city field in the database.
	FieldDistanceToCity = "distance_to_city"
	// FieldDirectionToCity holds the string denoting the direction_to_city field in the database.
	FieldDirectionToCity = "direction_to_city"
	// FieldAcreage holds the string denoting the acreage field in the database.
	FieldAcreage = "acreage"
	// FieldArtccID holds the string denoting the artcc_id field in the database.
	FieldArtccID = "artcc_id"
	// FieldArtccName holds the string denoting the artcc_name field in the database.
	FieldArtccName = "artcc_name"
	// FieldComputerID holds the string denoting the computer_id field in the database.
	FieldComputerID = "computer_id"
	// FieldFssOnAirport holds the string denoting the fss_on_airport field in the database.
	FieldFssOnAirport = "fss_on_airport"
	// FieldFssID holds the string denoting the fss_id field in the database.
	FieldFssID = "fss_id"
	// FieldFssName holds the string denoting the fss_name field in the database.
	FieldFssName = "fss_name"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldTollFreeNumber holds the string denoting the toll_free_number field in the database.
	FieldTollFreeNumber = "toll_free_number"
	// FieldAlternateFssID holds the string denoting the alternate_fss_id field in the database.
	FieldAlternateFssID = "alternate_fss_id"
	// FieldAlternateFssName holds the string denoting the alternate_fss_name field in the database.
	FieldAlternateFssName = "alternate_fss_name"
	// FieldAlternateTollFreeNumber holds the string denoting the alternate_toll_free_number field in the database.
	FieldAlternateTollFreeNumber = "alternate_toll_free_number"
	// FieldNotamID holds the string denoting the notam_id field in the database.
	FieldNotamID = "notam_id"
	// FieldNotamFlag holds the string denoting the notam_flag field in the database.
	FieldNotamFlag = "notam_flag"
	// FieldActivationDate holds the string denoting the activation_date field in the database.
	FieldActivationDate = "activation_date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeState holds the string denoting the state edge name in mutations.
	EdgeState = "state"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeRegion holds the string denoting the region edge name in mutations.
	EdgeRegion = "region"
	// Table holds the table name of the airport in the database.
	Table = "airports"
	// StateTable is the table that holds the state relation/edge.
	StateTable = "airports"
	// StateInverseTable is the table name for the State entity.
	// It exists in this package in order to avoid circular dependency with the "state" package.
	StateInverseTable = "states"
	// StateColumn is the table column denoting the state relation/edge.
	StateColumn = "state_airports"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "airports"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "cities"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_airports"
	// RegionTable is the table that holds the region relation/edge.
	RegionTable = "airports"
	// RegionInverseTable is the table name for the Region entity.
	// It exists in this package in order to avoid circular dependency with the "region" package.
	RegionInverseTable = "regions"
	// RegionColumn is the table column denoting the region relation/edge.
	RegionColumn = "region_airports"
)

// Columns holds all SQL columns for airport fields.
var Columns = []string{
	FieldID,
	FieldSiteID,
	FieldFacilityType,
	FieldAirportID,
	FieldAdoCode,
	FieldName,
	FieldOwnershipType,
	FieldUsage,
	FieldLatitude,
	FieldLongitude,
	FieldLocationSurveyMethod,
	FieldElevation,
	FieldElevationSurveyMethod,
	FieldMagneticVariance,
	FieldMagneticVarianceYear,
	FieldTrafficPatternAltitude,
	FieldChartName,
	FieldDistanceToCity,
	FieldDirectionToCity,
	FieldAcreage,
	FieldArtccID,
	FieldArtccName,
	FieldComputerID,
	FieldFssOnAirport,
	FieldFssID,
	FieldFssName,
	FieldPhoneNumber,
	FieldTollFreeNumber,
	FieldAlternateFssID,
	FieldAlternateFssName,
	FieldAlternateTollFreeNumber,
	FieldNotamID,
	FieldNotamFlag,
	FieldActivationDate,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "airports"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"city_airports",
	"region_airports",
	"state_airports",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// FacilityType defines the type for the "facility_type" enum field.
type FacilityType string

// FacilityType values.
const (
	FacilityTypeAirport      FacilityType = "AIRPORT"
	FacilityTypeBalloonport  FacilityType = "BALLOONPORT"
	FacilityTypeSeaplaneBase FacilityType = "SEAPLANE_BASE"
	FacilityTypeGliderport   FacilityType = "GLIDERPORT"
	FacilityTypeHeliport     FacilityType = "HELIPORT"
	FacilityTypeUltralight   FacilityType = "ULTRALIGHT"
)

func (ft FacilityType) String() string {
	return string(ft)
}

// FacilityTypeValidator is a validator for the "facility_type" field enum values. It is called by the builders before save.
func FacilityTypeValidator(ft FacilityType) error {
	switch ft {
	case FacilityTypeAirport, FacilityTypeBalloonport, FacilityTypeSeaplaneBase, FacilityTypeGliderport, FacilityTypeHeliport, FacilityTypeUltralight:
		return nil
	default:
		return fmt.Errorf("airport: invalid enum value for facility_type field: %q", ft)
	}
}

// OwnershipType defines the type for the "ownership_type" enum field.
type OwnershipType string

// OwnershipType values.
const (
	OwnershipTypePublic             OwnershipType = "PU"
	OwnershipTypePrivate            OwnershipType = "PR"
	OwnershipTypeMilitaryArmy       OwnershipType = "MR"
	OwnershipTypeMilitaryAirForce   OwnershipType = "MA"
	OwnershipTypeMilitaryNavy       OwnershipType = "MN"
	OwnershipTypeMilitaryCoastGuard OwnershipType = "CG"
)

func (ot OwnershipType) String() string {
	return string(ot)
}

// OwnershipTypeValidator is a validator for the "ownership_type" field enum values. It is called by the builders before save.
func OwnershipTypeValidator(ot OwnershipType) error {
	switch ot {
	case OwnershipTypePublic, OwnershipTypePrivate, OwnershipTypeMilitaryArmy, OwnershipTypeMilitaryAirForce, OwnershipTypeMilitaryNavy, OwnershipTypeMilitaryCoastGuard:
		return nil
	default:
		return fmt.Errorf("airport: invalid enum value for ownership_type field: %q", ot)
	}
}

// Usage defines the type for the "usage" enum field.
type Usage string

// Usage values.
const (
	UsagePublic  Usage = "PU"
	UsagePrivate Usage = "PR"
)

func (u Usage) String() string {
	return string(u)
}

// UsageValidator is a validator for the "usage" field enum values. It is called by the builders before save.
func UsageValidator(u Usage) error {
	switch u {
	case UsagePublic, UsagePrivate:
		return nil
	default:
		return fmt.Errorf("airport: invalid enum value for usage field: %q", u)
	}
}

// LocationSurveyMethod defines the type for the "location_survey_method" enum field.
type LocationSurveyMethod string

// LocationSurveyMethod values.
const (
	LocationSurveyMethodEstimated LocationSurveyMethod = "E"
	LocationSurveyMethodSurveyed  LocationSurveyMethod = "S"
)

func (lsm LocationSurveyMethod) String() string {
	return string(lsm)
}

// LocationSurveyMethodValidator is a validator for the "location_survey_method" field enum values. It is called by the builders before save.
func LocationSurveyMethodValidator(lsm LocationSurveyMethod) error {
	switch lsm {
	case LocationSurveyMethodEstimated, LocationSurveyMethodSurveyed:
		return nil
	default:
		return fmt.Errorf("airport: invalid enum value for location_survey_method field: %q", lsm)
	}
}

// ElevationSurveyMethod defines the type for the "elevation_survey_method" enum field.
type ElevationSurveyMethod string

// ElevationSurveyMethod values.
const (
	ElevationSurveyMethodEstimated ElevationSurveyMethod = "E"
	ElevationSurveyMethodSurveyed  ElevationSurveyMethod = "S"
)

func (esm ElevationSurveyMethod) String() string {
	return string(esm)
}

// ElevationSurveyMethodValidator is a validator for the "elevation_survey_method" field enum values. It is called by the builders before save.
func ElevationSurveyMethodValidator(esm ElevationSurveyMethod) error {
	switch esm {
	case ElevationSurveyMethodEstimated, ElevationSurveyMethodSurveyed:
		return nil
	default:
		return fmt.Errorf("airport: invalid enum value for elevation_survey_method field: %q", esm)
	}
}

// DirectionToCity defines the type for the "direction_to_city" enum field.
type DirectionToCity string

// DirectionToCity values.
const (
	DirectionToCityNorth          DirectionToCity = "N"
	DirectionToCityNorthNortheast DirectionToCity = "NNE"
	DirectionToCityNortheast      DirectionToCity = "NE"
	DirectionToCityEastNortheast  DirectionToCity = "ENE"
	DirectionToCityEast           DirectionToCity = "E"
	DirectionToCityEastSouthest   DirectionToCity = "ESE"
	DirectionToCitySoutheast      DirectionToCity = "SE"
	DirectionToCitySouthSoutheast DirectionToCity = "SSE"
	DirectionToCitySouth          DirectionToCity = "S"
	DirectionToCitySouthSouthwest DirectionToCity = "SSW"
	DirectionToCitySouthwest      DirectionToCity = "SW"
	DirectionToCityWestSouthwest  DirectionToCity = "WSW"
	DirectionToCityWest           DirectionToCity = "W"
	DirectionToCityWestNorthwest  DirectionToCity = "WNW"
	DirectionToCityNorthwest      DirectionToCity = "NW"
	DirectionToCityNorthNothwest  DirectionToCity = "NNW"
)

func (dtc DirectionToCity) String() string {
	return string(dtc)
}

// DirectionToCityValidator is a validator for the "direction_to_city" field enum values. It is called by the builders before save.
func DirectionToCityValidator(dtc DirectionToCity) error {
	switch dtc {
	case DirectionToCityNorth, DirectionToCityNorthNortheast, DirectionToCityNortheast, DirectionToCityEastNortheast, DirectionToCityEast, DirectionToCityEastSouthest, DirectionToCitySoutheast, DirectionToCitySouthSoutheast, DirectionToCitySouth, DirectionToCitySouthSouthwest, DirectionToCitySouthwest, DirectionToCityWestSouthwest, DirectionToCityWest, DirectionToCityWestNorthwest, DirectionToCityNorthwest, DirectionToCityNorthNothwest:
		return nil
	default:
		return fmt.Errorf("airport: invalid enum value for direction_to_city field: %q", dtc)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusOperational        Status = "O"
	StatusClosedIndefinitely Status = "CI"
	StatusClosedPermanently  Status = "CP"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusOperational, StatusClosedIndefinitely, StatusClosedPermanently:
		return nil
	default:
		return fmt.Errorf("airport: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Airport queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySiteID orders the results by the site_id field.
func BySiteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSiteID, opts...).ToFunc()
}

// ByFacilityType orders the results by the facility_type field.
func ByFacilityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityType, opts...).ToFunc()
}

// ByAirportID orders the results by the airport_id field.
func ByAirportID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAirportID, opts...).ToFunc()
}

// ByAdoCode orders the results by the ado_code field.
func ByAdoCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdoCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOwnershipType orders the results by the ownership_type field.
func ByOwnershipType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnershipType, opts...).ToFunc()
}

// ByUsage orders the results by the usage field.
func ByUsage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsage, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByLocationSurveyMethod orders the results by the location_survey_method field.
func ByLocationSurveyMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocationSurveyMethod, opts...).ToFunc()
}

// ByElevation orders the results by the elevation field.
func ByElevation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldElevation, opts...).ToFunc()
}

// ByElevationSurveyMethod orders the results by the elevation_survey_method field.
func ByElevationSurveyMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldElevationSurveyMethod, opts...).ToFunc()
}

// ByMagneticVariance orders the results by the magnetic_variance field.
func ByMagneticVariance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMagneticVariance, opts...).ToFunc()
}

// ByMagneticVarianceYear orders the results by the magnetic_variance_year field.
func ByMagneticVarianceYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMagneticVarianceYear, opts...).ToFunc()
}

// ByTrafficPatternAltitude orders the results by the traffic_pattern_altitude field.
func ByTrafficPatternAltitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrafficPatternAltitude, opts...).ToFunc()
}

// ByChartName orders the results by the chart_name field.
func ByChartName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChartName, opts...).ToFunc()
}

// ByDistanceToCity orders the results by the distance_to_city field.
func ByDistanceToCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistanceToCity, opts...).ToFunc()
}

// ByDirectionToCity orders the results by the direction_to_city field.
func ByDirectionToCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDirectionToCity, opts...).ToFunc()
}

// ByAcreage orders the results by the acreage field.
func ByAcreage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcreage, opts...).ToFunc()
}

// ByArtccID orders the results by the artcc_id field.
func ByArtccID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtccID, opts...).ToFunc()
}

// ByArtccName orders the results by the artcc_name field.
func ByArtccName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtccName, opts...).ToFunc()
}

// ByComputerID orders the results by the computer_id field.
func ByComputerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComputerID, opts...).ToFunc()
}

// ByFssOnAirport orders the results by the fss_on_airport field.
func ByFssOnAirport(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFssOnAirport, opts...).ToFunc()
}

// ByFssID orders the results by the fss_id field.
func ByFssID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFssID, opts...).ToFunc()
}

// ByFssName orders the results by the fss_name field.
func ByFssName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFssName, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByTollFreeNumber orders the results by the toll_free_number field.
func ByTollFreeNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTollFreeNumber, opts...).ToFunc()
}

// ByAlternateFssID orders the results by the alternate_fss_id field.
func ByAlternateFssID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlternateFssID, opts...).ToFunc()
}

// ByAlternateFssName orders the results by the alternate_fss_name field.
func ByAlternateFssName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlternateFssName, opts...).ToFunc()
}

// ByAlternateTollFreeNumber orders the results by the alternate_toll_free_number field.
func ByAlternateTollFreeNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlternateTollFreeNumber, opts...).ToFunc()
}

// ByNotamID orders the results by the notam_id field.
func ByNotamID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotamID, opts...).ToFunc()
}

// ByNotamFlag orders the results by the notam_flag field.
func ByNotamFlag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotamFlag, opts...).ToFunc()
}

// ByActivationDate orders the results by the activation_date field.
func ByActivationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivationDate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStateField orders the results by state field.
func ByStateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStateStep(), sql.OrderByField(field, opts...))
	}
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByRegionField orders the results by region field.
func ByRegionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRegionStep(), sql.OrderByField(field, opts...))
	}
}
func newStateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StateTable, StateColumn),
	)
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CityTable, CityColumn),
	)
}
func newRegionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RegionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RegionTable, RegionColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e FacilityType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *FacilityType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = FacilityType(str)
	if err := FacilityTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid FacilityType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e OwnershipType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *OwnershipType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = OwnershipType(str)
	if err := OwnershipTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid OwnershipType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Usage) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Usage) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Usage(str)
	if err := UsageValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Usage", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e LocationSurveyMethod) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *LocationSurveyMethod) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = LocationSurveyMethod(str)
	if err := LocationSurveyMethodValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid LocationSurveyMethod", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e ElevationSurveyMethod) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *ElevationSurveyMethod) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = ElevationSurveyMethod(str)
	if err := ElevationSurveyMethodValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid ElevationSurveyMethod", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e DirectionToCity) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *DirectionToCity) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = DirectionToCity(str)
	if err := DirectionToCityValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid DirectionToCity", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
