// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openflt/fltbase/ent/state"
)

// State is the model entity for the State schema.
type State struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StateQuery when eager-loading is set.
	Edges        StateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StateEdges holds the relations/edges for other nodes in the graph.
type StateEdges struct {
	// Cities holds the value of the cities edge.
	Cities []*City `json:"cities,omitempty"`
	// Airports holds the value of the airports edge.
	Airports []*Airport `json:"airports,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCities   map[string][]*City
	namedAirports map[string][]*Airport
}

// CitiesOrErr returns the Cities value or an error if the edge
// was not loaded in eager-loading.
func (e StateEdges) CitiesOrErr() ([]*City, error) {
	if e.loadedTypes[0] {
		return e.Cities, nil
	}
	return nil, &NotLoadedError{edge: "cities"}
}

// AirportsOrErr returns the Airports value or an error if the edge
// was not loaded in eager-loading.
func (e StateEdges) AirportsOrErr() ([]*Airport, error) {
	if e.loadedTypes[1] {
		return e.Airports, nil
	}
	return nil, &NotLoadedError{edge: "airports"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*State) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case state.FieldID:
			values[i] = new(sql.NullInt64)
		case state.FieldCode, state.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the State fields.
func (s *State) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case state.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case state.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				s.Code = value.String
			}
		case state.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the State.
// This includes values selected through modifiers, order, etc.
func (s *State) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryCities queries the "cities" edge of the State entity.
func (s *State) QueryCities() *CityQuery {
	return NewStateClient(s.config).QueryCities(s)
}

// QueryAirports queries the "airports" edge of the State entity.
func (s *State) QueryAirports() *AirportQuery {
	return NewStateClient(s.config).QueryAirports(s)
}

// Update returns a builder for updating this State.
// Note that you need to call State.Unwrap() before calling this method if this State
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *State) Update() *StateUpdateOne {
	return NewStateClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the State entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *State) Unwrap() *State {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: State is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *State) String() string {
	var builder strings.Builder
	builder.WriteString("State(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("code=")
	builder.WriteString(s.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCities returns the Cities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *State) NamedCities(name string) ([]*City, error) {
	if s.Edges.namedCities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedCities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *State) appendNamedCities(name string, edges ...*City) {
	if s.Edges.namedCities == nil {
		s.Edges.namedCities = make(map[string][]*City)
	}
	if len(edges) == 0 {
		s.Edges.namedCities[name] = []*City{}
	} else {
		s.Edges.namedCities[name] = append(s.Edges.namedCities[name], edges...)
	}
}

// NamedAirports returns the Airports named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *State) NamedAirports(name string) ([]*Airport, error) {
	if s.Edges.namedAirports == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedAirports[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *State) appendNamedAirports(name string, edges ...*Airport) {
	if s.Edges.namedAirports == nil {
		s.Edges.namedAirports = make(map[string][]*Airport)
	}
	if len(edges) == 0 {
		s.Edges.namedAirports[name] = []*Airport{}
	} else {
		s.Edges.namedAirports[name] = append(s.Edges.namedAirports[name], edges...)
	}
}

// States is a parsable slice of State.
type States []*State
