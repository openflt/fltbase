// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openflt/fltbase/ent/airport"
	"github.com/openflt/fltbase/ent/city"
	"github.com/openflt/fltbase/ent/region"
	"github.com/openflt/fltbase/ent/state"
)

// AirportCreate is the builder for creating a Airport entity.
type AirportCreate struct {
	config
	mutation *AirportMutation
	hooks    []Hook
}

// SetSiteID sets the "site_id" field.
func (ac *AirportCreate) SetSiteID(s string) *AirportCreate {
	ac.mutation.SetSiteID(s)
	return ac
}

// SetFacilityType sets the "facility_type" field.
func (ac *AirportCreate) SetFacilityType(at airport.FacilityType) *AirportCreate {
	ac.mutation.SetFacilityType(at)
	return ac
}

// SetAirportID sets the "airport_id" field.
func (ac *AirportCreate) SetAirportID(s string) *AirportCreate {
	ac.mutation.SetAirportID(s)
	return ac
}

// SetAdoCode sets the "ado_code" field.
func (ac *AirportCreate) SetAdoCode(s string) *AirportCreate {
	ac.mutation.SetAdoCode(s)
	return ac
}

// SetName sets the "name" field.
func (ac *AirportCreate) SetName(s string) *AirportCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetOwnershipType sets the "ownership_type" field.
func (ac *AirportCreate) SetOwnershipType(at airport.OwnershipType) *AirportCreate {
	ac.mutation.SetOwnershipType(at)
	return ac
}

// SetUsage sets the "usage" field.
func (ac *AirportCreate) SetUsage(a airport.Usage) *AirportCreate {
	ac.mutation.SetUsage(a)
	return ac
}

// SetLatitude sets the "latitude" field.
func (ac *AirportCreate) SetLatitude(f float32) *AirportCreate {
	ac.mutation.SetLatitude(f)
	return ac
}

// SetLongitude sets the "longitude" field.
func (ac *AirportCreate) SetLongitude(f float32) *AirportCreate {
	ac.mutation.SetLongitude(f)
	return ac
}

// SetLocationSurveyMethod sets the "location_survey_method" field.
func (ac *AirportCreate) SetLocationSurveyMethod(asm airport.LocationSurveyMethod) *AirportCreate {
	ac.mutation.SetLocationSurveyMethod(asm)
	return ac
}

// SetElevation sets the "elevation" field.
func (ac *AirportCreate) SetElevation(f float32) *AirportCreate {
	ac.mutation.SetElevation(f)
	return ac
}

// SetElevationSurveyMethod sets the "elevation_survey_method" field.
func (ac *AirportCreate) SetElevationSurveyMethod(asm airport.ElevationSurveyMethod) *AirportCreate {
	ac.mutation.SetElevationSurveyMethod(asm)
	return ac
}

// SetMagneticVariance sets the "magnetic_variance" field.
func (ac *AirportCreate) SetMagneticVariance(i int8) *AirportCreate {
	ac.mutation.SetMagneticVariance(i)
	return ac
}

// SetMagneticVarianceYear sets the "magnetic_variance_year" field.
func (ac *AirportCreate) SetMagneticVarianceYear(i int8) *AirportCreate {
	ac.mutation.SetMagneticVarianceYear(i)
	return ac
}

// SetTrafficPatternAltitude sets the "traffic_pattern_altitude" field.
func (ac *AirportCreate) SetTrafficPatternAltitude(i int8) *AirportCreate {
	ac.mutation.SetTrafficPatternAltitude(i)
	return ac
}

// SetChartName sets the "chart_name" field.
func (ac *AirportCreate) SetChartName(s string) *AirportCreate {
	ac.mutation.SetChartName(s)
	return ac
}

// SetDistanceToCity sets the "distance_to_city" field.
func (ac *AirportCreate) SetDistanceToCity(u uint8) *AirportCreate {
	ac.mutation.SetDistanceToCity(u)
	return ac
}

// SetDirectionToCity sets the "direction_to_city" field.
func (ac *AirportCreate) SetDirectionToCity(atc airport.DirectionToCity) *AirportCreate {
	ac.mutation.SetDirectionToCity(atc)
	return ac
}

// SetAcreage sets the "acreage" field.
func (ac *AirportCreate) SetAcreage(u uint8) *AirportCreate {
	ac.mutation.SetAcreage(u)
	return ac
}

// SetArtccID sets the "artcc_id" field.
func (ac *AirportCreate) SetArtccID(s string) *AirportCreate {
	ac.mutation.SetArtccID(s)
	return ac
}

// SetArtccName sets the "artcc_name" field.
func (ac *AirportCreate) SetArtccName(s string) *AirportCreate {
	ac.mutation.SetArtccName(s)
	return ac
}

// SetComputerID sets the "computer_id" field.
func (ac *AirportCreate) SetComputerID(s string) *AirportCreate {
	ac.mutation.SetComputerID(s)
	return ac
}

// SetFssOnAirport sets the "fss_on_airport" field.
func (ac *AirportCreate) SetFssOnAirport(b bool) *AirportCreate {
	ac.mutation.SetFssOnAirport(b)
	return ac
}

// SetFssID sets the "fss_id" field.
func (ac *AirportCreate) SetFssID(s string) *AirportCreate {
	ac.mutation.SetFssID(s)
	return ac
}

// SetFssName sets the "fss_name" field.
func (ac *AirportCreate) SetFssName(s string) *AirportCreate {
	ac.mutation.SetFssName(s)
	return ac
}

// SetPhoneNumber sets the "phone_number" field.
func (ac *AirportCreate) SetPhoneNumber(s string) *AirportCreate {
	ac.mutation.SetPhoneNumber(s)
	return ac
}

// SetTollFreeNumber sets the "toll_free_number" field.
func (ac *AirportCreate) SetTollFreeNumber(s string) *AirportCreate {
	ac.mutation.SetTollFreeNumber(s)
	return ac
}

// SetAlternateFssID sets the "alternate_fss_id" field.
func (ac *AirportCreate) SetAlternateFssID(s string) *AirportCreate {
	ac.mutation.SetAlternateFssID(s)
	return ac
}

// SetAlternateFssName sets the "alternate_fss_name" field.
func (ac *AirportCreate) SetAlternateFssName(s string) *AirportCreate {
	ac.mutation.SetAlternateFssName(s)
	return ac
}

// SetAlternateTollFreeNumber sets the "alternate_toll_free_number" field.
func (ac *AirportCreate) SetAlternateTollFreeNumber(s string) *AirportCreate {
	ac.mutation.SetAlternateTollFreeNumber(s)
	return ac
}

// SetNotamID sets the "notam_id" field.
func (ac *AirportCreate) SetNotamID(s string) *AirportCreate {
	ac.mutation.SetNotamID(s)
	return ac
}

// SetNotamFlag sets the "notam_flag" field.
func (ac *AirportCreate) SetNotamFlag(b bool) *AirportCreate {
	ac.mutation.SetNotamFlag(b)
	return ac
}

// SetActivationDate sets the "activation_date" field.
func (ac *AirportCreate) SetActivationDate(t time.Time) *AirportCreate {
	ac.mutation.SetActivationDate(t)
	return ac
}

// SetStatus sets the "status" field.
func (ac *AirportCreate) SetStatus(a airport.Status) *AirportCreate {
	ac.mutation.SetStatus(a)
	return ac
}

// SetStateID sets the "state" edge to the State entity by ID.
func (ac *AirportCreate) SetStateID(id int) *AirportCreate {
	ac.mutation.SetStateID(id)
	return ac
}

// SetNillableStateID sets the "state" edge to the State entity by ID if the given value is not nil.
func (ac *AirportCreate) SetNillableStateID(id *int) *AirportCreate {
	if id != nil {
		ac = ac.SetStateID(*id)
	}
	return ac
}

// SetState sets the "state" edge to the State entity.
func (ac *AirportCreate) SetState(s *State) *AirportCreate {
	return ac.SetStateID(s.ID)
}

// SetCityID sets the "city" edge to the City entity by ID.
func (ac *AirportCreate) SetCityID(id int) *AirportCreate {
	ac.mutation.SetCityID(id)
	return ac
}

// SetNillableCityID sets the "city" edge to the City entity by ID if the given value is not nil.
func (ac *AirportCreate) SetNillableCityID(id *int) *AirportCreate {
	if id != nil {
		ac = ac.SetCityID(*id)
	}
	return ac
}

// SetCity sets the "city" edge to the City entity.
func (ac *AirportCreate) SetCity(c *City) *AirportCreate {
	return ac.SetCityID(c.ID)
}

// SetRegionID sets the "region" edge to the Region entity by ID.
func (ac *AirportCreate) SetRegionID(id int) *AirportCreate {
	ac.mutation.SetRegionID(id)
	return ac
}

// SetNillableRegionID sets the "region" edge to the Region entity by ID if the given value is not nil.
func (ac *AirportCreate) SetNillableRegionID(id *int) *AirportCreate {
	if id != nil {
		ac = ac.SetRegionID(*id)
	}
	return ac
}

// SetRegion sets the "region" edge to the Region entity.
func (ac *AirportCreate) SetRegion(r *Region) *AirportCreate {
	return ac.SetRegionID(r.ID)
}

// Mutation returns the AirportMutation object of the builder.
func (ac *AirportCreate) Mutation() *AirportMutation {
	return ac.mutation
}

// Save creates the Airport in the database.
func (ac *AirportCreate) Save(ctx context.Context) (*Airport, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AirportCreate) SaveX(ctx context.Context) *Airport {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AirportCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AirportCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AirportCreate) check() error {
	if _, ok := ac.mutation.SiteID(); !ok {
		return &ValidationError{Name: "site_id", err: errors.New(`ent: missing required field "Airport.site_id"`)}
	}
	if _, ok := ac.mutation.FacilityType(); !ok {
		return &ValidationError{Name: "facility_type", err: errors.New(`ent: missing required field "Airport.facility_type"`)}
	}
	if v, ok := ac.mutation.FacilityType(); ok {
		if err := airport.FacilityTypeValidator(v); err != nil {
			return &ValidationError{Name: "facility_type", err: fmt.Errorf(`ent: validator failed for field "Airport.facility_type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.AirportID(); !ok {
		return &ValidationError{Name: "airport_id", err: errors.New(`ent: missing required field "Airport.airport_id"`)}
	}
	if _, ok := ac.mutation.AdoCode(); !ok {
		return &ValidationError{Name: "ado_code", err: errors.New(`ent: missing required field "Airport.ado_code"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Airport.name"`)}
	}
	if _, ok := ac.mutation.OwnershipType(); !ok {
		return &ValidationError{Name: "ownership_type", err: errors.New(`ent: missing required field "Airport.ownership_type"`)}
	}
	if v, ok := ac.mutation.OwnershipType(); ok {
		if err := airport.OwnershipTypeValidator(v); err != nil {
			return &ValidationError{Name: "ownership_type", err: fmt.Errorf(`ent: validator failed for field "Airport.ownership_type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Usage(); !ok {
		return &ValidationError{Name: "usage", err: errors.New(`ent: missing required field "Airport.usage"`)}
	}
	if v, ok := ac.mutation.Usage(); ok {
		if err := airport.UsageValidator(v); err != nil {
			return &ValidationError{Name: "usage", err: fmt.Errorf(`ent: validator failed for field "Airport.usage": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "Airport.latitude"`)}
	}
	if _, ok := ac.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "Airport.longitude"`)}
	}
	if _, ok := ac.mutation.LocationSurveyMethod(); !ok {
		return &ValidationError{Name: "location_survey_method", err: errors.New(`ent: missing required field "Airport.location_survey_method"`)}
	}
	if v, ok := ac.mutation.LocationSurveyMethod(); ok {
		if err := airport.LocationSurveyMethodValidator(v); err != nil {
			return &ValidationError{Name: "location_survey_method", err: fmt.Errorf(`ent: validator failed for field "Airport.location_survey_method": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Elevation(); !ok {
		return &ValidationError{Name: "elevation", err: errors.New(`ent: missing required field "Airport.elevation"`)}
	}
	if _, ok := ac.mutation.ElevationSurveyMethod(); !ok {
		return &ValidationError{Name: "elevation_survey_method", err: errors.New(`ent: missing required field "Airport.elevation_survey_method"`)}
	}
	if v, ok := ac.mutation.ElevationSurveyMethod(); ok {
		if err := airport.ElevationSurveyMethodValidator(v); err != nil {
			return &ValidationError{Name: "elevation_survey_method", err: fmt.Errorf(`ent: validator failed for field "Airport.elevation_survey_method": %w`, err)}
		}
	}
	if _, ok := ac.mutation.MagneticVariance(); !ok {
		return &ValidationError{Name: "magnetic_variance", err: errors.New(`ent: missing required field "Airport.magnetic_variance"`)}
	}
	if _, ok := ac.mutation.MagneticVarianceYear(); !ok {
		return &ValidationError{Name: "magnetic_variance_year", err: errors.New(`ent: missing required field "Airport.magnetic_variance_year"`)}
	}
	if _, ok := ac.mutation.TrafficPatternAltitude(); !ok {
		return &ValidationError{Name: "traffic_pattern_altitude", err: errors.New(`ent: missing required field "Airport.traffic_pattern_altitude"`)}
	}
	if _, ok := ac.mutation.ChartName(); !ok {
		return &ValidationError{Name: "chart_name", err: errors.New(`ent: missing required field "Airport.chart_name"`)}
	}
	if _, ok := ac.mutation.DistanceToCity(); !ok {
		return &ValidationError{Name: "distance_to_city", err: errors.New(`ent: missing required field "Airport.distance_to_city"`)}
	}
	if _, ok := ac.mutation.DirectionToCity(); !ok {
		return &ValidationError{Name: "direction_to_city", err: errors.New(`ent: missing required field "Airport.direction_to_city"`)}
	}
	if v, ok := ac.mutation.DirectionToCity(); ok {
		if err := airport.DirectionToCityValidator(v); err != nil {
			return &ValidationError{Name: "direction_to_city", err: fmt.Errorf(`ent: validator failed for field "Airport.direction_to_city": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Acreage(); !ok {
		return &ValidationError{Name: "acreage", err: errors.New(`ent: missing required field "Airport.acreage"`)}
	}
	if _, ok := ac.mutation.ArtccID(); !ok {
		return &ValidationError{Name: "artcc_id", err: errors.New(`ent: missing required field "Airport.artcc_id"`)}
	}
	if _, ok := ac.mutation.ArtccName(); !ok {
		return &ValidationError{Name: "artcc_name", err: errors.New(`ent: missing required field "Airport.artcc_name"`)}
	}
	if _, ok := ac.mutation.ComputerID(); !ok {
		return &ValidationError{Name: "computer_id", err: errors.New(`ent: missing required field "Airport.computer_id"`)}
	}
	if _, ok := ac.mutation.FssOnAirport(); !ok {
		return &ValidationError{Name: "fss_on_airport", err: errors.New(`ent: missing required field "Airport.fss_on_airport"`)}
	}
	if _, ok := ac.mutation.FssID(); !ok {
		return &ValidationError{Name: "fss_id", err: errors.New(`ent: missing required field "Airport.fss_id"`)}
	}
	if _, ok := ac.mutation.FssName(); !ok {
		return &ValidationError{Name: "fss_name", err: errors.New(`ent: missing required field "Airport.fss_name"`)}
	}
	if _, ok := ac.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "Airport.phone_number"`)}
	}
	if _, ok := ac.mutation.TollFreeNumber(); !ok {
		return &ValidationError{Name: "toll_free_number", err: errors.New(`ent: missing required field "Airport.toll_free_number"`)}
	}
	if _, ok := ac.mutation.AlternateFssID(); !ok {
		return &ValidationError{Name: "alternate_fss_id", err: errors.New(`ent: missing required field "Airport.alternate_fss_id"`)}
	}
	if _, ok := ac.mutation.AlternateFssName(); !ok {
		return &ValidationError{Name: "alternate_fss_name", err: errors.New(`ent: missing required field "Airport.alternate_fss_name"`)}
	}
	if _, ok := ac.mutation.AlternateTollFreeNumber(); !ok {
		return &ValidationError{Name: "alternate_toll_free_number", err: errors.New(`ent: missing required field "Airport.alternate_toll_free_number"`)}
	}
	if _, ok := ac.mutation.NotamID(); !ok {
		return &ValidationError{Name: "notam_id", err: errors.New(`ent: missing required field "Airport.notam_id"`)}
	}
	if _, ok := ac.mutation.NotamFlag(); !ok {
		return &ValidationError{Name: "notam_flag", err: errors.New(`ent: missing required field "Airport.notam_flag"`)}
	}
	if _, ok := ac.mutation.ActivationDate(); !ok {
		return &ValidationError{Name: "activation_date", err: errors.New(`ent: missing required field "Airport.activation_date"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Airport.status"`)}
	}
	if v, ok := ac.mutation.Status(); ok {
		if err := airport.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Airport.status": %w`, err)}
		}
	}
	return nil
}

func (ac *AirportCreate) sqlSave(ctx context.Context) (*Airport, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AirportCreate) createSpec() (*Airport, *sqlgraph.CreateSpec) {
	var (
		_node = &Airport{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(airport.Table, sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.SiteID(); ok {
		_spec.SetField(airport.FieldSiteID, field.TypeString, value)
		_node.SiteID = value
	}
	if value, ok := ac.mutation.FacilityType(); ok {
		_spec.SetField(airport.FieldFacilityType, field.TypeEnum, value)
		_node.FacilityType = value
	}
	if value, ok := ac.mutation.AirportID(); ok {
		_spec.SetField(airport.FieldAirportID, field.TypeString, value)
		_node.AirportID = value
	}
	if value, ok := ac.mutation.AdoCode(); ok {
		_spec.SetField(airport.FieldAdoCode, field.TypeString, value)
		_node.AdoCode = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(airport.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.OwnershipType(); ok {
		_spec.SetField(airport.FieldOwnershipType, field.TypeEnum, value)
		_node.OwnershipType = value
	}
	if value, ok := ac.mutation.Usage(); ok {
		_spec.SetField(airport.FieldUsage, field.TypeEnum, value)
		_node.Usage = value
	}
	if value, ok := ac.mutation.Latitude(); ok {
		_spec.SetField(airport.FieldLatitude, field.TypeFloat32, value)
		_node.Latitude = value
	}
	if value, ok := ac.mutation.Longitude(); ok {
		_spec.SetField(airport.FieldLongitude, field.TypeFloat32, value)
		_node.Longitude = value
	}
	if value, ok := ac.mutation.LocationSurveyMethod(); ok {
		_spec.SetField(airport.FieldLocationSurveyMethod, field.TypeEnum, value)
		_node.LocationSurveyMethod = value
	}
	if value, ok := ac.mutation.Elevation(); ok {
		_spec.SetField(airport.FieldElevation, field.TypeFloat32, value)
		_node.Elevation = value
	}
	if value, ok := ac.mutation.ElevationSurveyMethod(); ok {
		_spec.SetField(airport.FieldElevationSurveyMethod, field.TypeEnum, value)
		_node.ElevationSurveyMethod = value
	}
	if value, ok := ac.mutation.MagneticVariance(); ok {
		_spec.SetField(airport.FieldMagneticVariance, field.TypeInt8, value)
		_node.MagneticVariance = value
	}
	if value, ok := ac.mutation.MagneticVarianceYear(); ok {
		_spec.SetField(airport.FieldMagneticVarianceYear, field.TypeInt8, value)
		_node.MagneticVarianceYear = value
	}
	if value, ok := ac.mutation.TrafficPatternAltitude(); ok {
		_spec.SetField(airport.FieldTrafficPatternAltitude, field.TypeInt8, value)
		_node.TrafficPatternAltitude = value
	}
	if value, ok := ac.mutation.ChartName(); ok {
		_spec.SetField(airport.FieldChartName, field.TypeString, value)
		_node.ChartName = value
	}
	if value, ok := ac.mutation.DistanceToCity(); ok {
		_spec.SetField(airport.FieldDistanceToCity, field.TypeUint8, value)
		_node.DistanceToCity = value
	}
	if value, ok := ac.mutation.DirectionToCity(); ok {
		_spec.SetField(airport.FieldDirectionToCity, field.TypeEnum, value)
		_node.DirectionToCity = value
	}
	if value, ok := ac.mutation.Acreage(); ok {
		_spec.SetField(airport.FieldAcreage, field.TypeUint8, value)
		_node.Acreage = value
	}
	if value, ok := ac.mutation.ArtccID(); ok {
		_spec.SetField(airport.FieldArtccID, field.TypeString, value)
		_node.ArtccID = value
	}
	if value, ok := ac.mutation.ArtccName(); ok {
		_spec.SetField(airport.FieldArtccName, field.TypeString, value)
		_node.ArtccName = value
	}
	if value, ok := ac.mutation.ComputerID(); ok {
		_spec.SetField(airport.FieldComputerID, field.TypeString, value)
		_node.ComputerID = value
	}
	if value, ok := ac.mutation.FssOnAirport(); ok {
		_spec.SetField(airport.FieldFssOnAirport, field.TypeBool, value)
		_node.FssOnAirport = value
	}
	if value, ok := ac.mutation.FssID(); ok {
		_spec.SetField(airport.FieldFssID, field.TypeString, value)
		_node.FssID = value
	}
	if value, ok := ac.mutation.FssName(); ok {
		_spec.SetField(airport.FieldFssName, field.TypeString, value)
		_node.FssName = value
	}
	if value, ok := ac.mutation.PhoneNumber(); ok {
		_spec.SetField(airport.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := ac.mutation.TollFreeNumber(); ok {
		_spec.SetField(airport.FieldTollFreeNumber, field.TypeString, value)
		_node.TollFreeNumber = value
	}
	if value, ok := ac.mutation.AlternateFssID(); ok {
		_spec.SetField(airport.FieldAlternateFssID, field.TypeString, value)
		_node.AlternateFssID = value
	}
	if value, ok := ac.mutation.AlternateFssName(); ok {
		_spec.SetField(airport.FieldAlternateFssName, field.TypeString, value)
		_node.AlternateFssName = value
	}
	if value, ok := ac.mutation.AlternateTollFreeNumber(); ok {
		_spec.SetField(airport.FieldAlternateTollFreeNumber, field.TypeString, value)
		_node.AlternateTollFreeNumber = value
	}
	if value, ok := ac.mutation.NotamID(); ok {
		_spec.SetField(airport.FieldNotamID, field.TypeString, value)
		_node.NotamID = value
	}
	if value, ok := ac.mutation.NotamFlag(); ok {
		_spec.SetField(airport.FieldNotamFlag, field.TypeBool, value)
		_node.NotamFlag = value
	}
	if value, ok := ac.mutation.ActivationDate(); ok {
		_spec.SetField(airport.FieldActivationDate, field.TypeTime, value)
		_node.ActivationDate = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(airport.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := ac.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.StateTable,
			Columns: []string{airport.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(state.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.state_airports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.CityTable,
			Columns: []string{airport.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.city_airports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   airport.RegionTable,
			Columns: []string{airport.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.region_airports = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AirportCreateBulk is the builder for creating many Airport entities in bulk.
type AirportCreateBulk struct {
	config
	builders []*AirportCreate
}

// Save creates the Airport entities in the database.
func (acb *AirportCreateBulk) Save(ctx context.Context) ([]*Airport, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Airport, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AirportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AirportCreateBulk) SaveX(ctx context.Context) []*Airport {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AirportCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AirportCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
