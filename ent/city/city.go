// Code generated by ent, DO NOT EDIT.

package city

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the city type in the database.
	Label = "city"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeState holds the string denoting the state edge name in mutations.
	EdgeState = "state"
	// EdgeAirports holds the string denoting the airports edge name in mutations.
	EdgeAirports = "airports"
	// Table holds the table name of the city in the database.
	Table = "cities"
	// StateTable is the table that holds the state relation/edge.
	StateTable = "cities"
	// StateInverseTable is the table name for the State entity.
	// It exists in this package in order to avoid circular dependency with the "state" package.
	StateInverseTable = "states"
	// StateColumn is the table column denoting the state relation/edge.
	StateColumn = "state_cities"
	// AirportsTable is the table that holds the airports relation/edge.
	AirportsTable = "airports"
	// AirportsInverseTable is the table name for the Airport entity.
	// It exists in this package in order to avoid circular dependency with the "airport" package.
	AirportsInverseTable = "airports"
	// AirportsColumn is the table column denoting the airports relation/edge.
	AirportsColumn = "city_airports"
)

// Columns holds all SQL columns for city fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cities"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"state_cities",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the City queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStateField orders the results by state field.
func ByStateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStateStep(), sql.OrderByField(field, opts...))
	}
}

// ByAirportsCount orders the results by airports count.
func ByAirportsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAirportsStep(), opts...)
	}
}

// ByAirports orders the results by airports terms.
func ByAirports(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAirportsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StateTable, StateColumn),
	)
}
func newAirportsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AirportsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AirportsTable, AirportsColumn),
	)
}
