// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openflt/fltbase/ent/airport"
	"github.com/openflt/fltbase/ent/city"
	"github.com/openflt/fltbase/ent/predicate"
	"github.com/openflt/fltbase/ent/state"
)

// StateUpdate is the builder for updating State entities.
type StateUpdate struct {
	config
	hooks    []Hook
	mutation *StateMutation
}

// Where appends a list predicates to the StateUpdate builder.
func (su *StateUpdate) Where(ps ...predicate.State) *StateUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCode sets the "code" field.
func (su *StateUpdate) SetCode(s string) *StateUpdate {
	su.mutation.SetCode(s)
	return su
}

// SetName sets the "name" field.
func (su *StateUpdate) SetName(s string) *StateUpdate {
	su.mutation.SetName(s)
	return su
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (su *StateUpdate) AddCityIDs(ids ...int) *StateUpdate {
	su.mutation.AddCityIDs(ids...)
	return su
}

// AddCities adds the "cities" edges to the City entity.
func (su *StateUpdate) AddCities(c ...*City) *StateUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCityIDs(ids...)
}

// AddAirportIDs adds the "airports" edge to the Airport entity by IDs.
func (su *StateUpdate) AddAirportIDs(ids ...int) *StateUpdate {
	su.mutation.AddAirportIDs(ids...)
	return su
}

// AddAirports adds the "airports" edges to the Airport entity.
func (su *StateUpdate) AddAirports(a ...*Airport) *StateUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddAirportIDs(ids...)
}

// Mutation returns the StateMutation object of the builder.
func (su *StateUpdate) Mutation() *StateMutation {
	return su.mutation
}

// ClearCities clears all "cities" edges to the City entity.
func (su *StateUpdate) ClearCities() *StateUpdate {
	su.mutation.ClearCities()
	return su
}

// RemoveCityIDs removes the "cities" edge to City entities by IDs.
func (su *StateUpdate) RemoveCityIDs(ids ...int) *StateUpdate {
	su.mutation.RemoveCityIDs(ids...)
	return su
}

// RemoveCities removes "cities" edges to City entities.
func (su *StateUpdate) RemoveCities(c ...*City) *StateUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCityIDs(ids...)
}

// ClearAirports clears all "airports" edges to the Airport entity.
func (su *StateUpdate) ClearAirports() *StateUpdate {
	su.mutation.ClearAirports()
	return su
}

// RemoveAirportIDs removes the "airports" edge to Airport entities by IDs.
func (su *StateUpdate) RemoveAirportIDs(ids ...int) *StateUpdate {
	su.mutation.RemoveAirportIDs(ids...)
	return su
}

// RemoveAirports removes "airports" edges to Airport entities.
func (su *StateUpdate) RemoveAirports(a ...*Airport) *StateUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveAirportIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StateUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StateUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StateUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(state.Table, state.Columns, sqlgraph.NewFieldSpec(state.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Code(); ok {
		_spec.SetField(state.FieldCode, field.TypeString, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(state.FieldName, field.TypeString, value)
	}
	if su.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.CitiesTable,
			Columns: []string{state.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCitiesIDs(); len(nodes) > 0 && !su.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.CitiesTable,
			Columns: []string{state.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.CitiesTable,
			Columns: []string{state.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AirportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.AirportsTable,
			Columns: []string{state.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAirportsIDs(); len(nodes) > 0 && !su.mutation.AirportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.AirportsTable,
			Columns: []string{state.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AirportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.AirportsTable,
			Columns: []string{state.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{state.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StateUpdateOne is the builder for updating a single State entity.
type StateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StateMutation
}

// SetCode sets the "code" field.
func (suo *StateUpdateOne) SetCode(s string) *StateUpdateOne {
	suo.mutation.SetCode(s)
	return suo
}

// SetName sets the "name" field.
func (suo *StateUpdateOne) SetName(s string) *StateUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (suo *StateUpdateOne) AddCityIDs(ids ...int) *StateUpdateOne {
	suo.mutation.AddCityIDs(ids...)
	return suo
}

// AddCities adds the "cities" edges to the City entity.
func (suo *StateUpdateOne) AddCities(c ...*City) *StateUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCityIDs(ids...)
}

// AddAirportIDs adds the "airports" edge to the Airport entity by IDs.
func (suo *StateUpdateOne) AddAirportIDs(ids ...int) *StateUpdateOne {
	suo.mutation.AddAirportIDs(ids...)
	return suo
}

// AddAirports adds the "airports" edges to the Airport entity.
func (suo *StateUpdateOne) AddAirports(a ...*Airport) *StateUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddAirportIDs(ids...)
}

// Mutation returns the StateMutation object of the builder.
func (suo *StateUpdateOne) Mutation() *StateMutation {
	return suo.mutation
}

// ClearCities clears all "cities" edges to the City entity.
func (suo *StateUpdateOne) ClearCities() *StateUpdateOne {
	suo.mutation.ClearCities()
	return suo
}

// RemoveCityIDs removes the "cities" edge to City entities by IDs.
func (suo *StateUpdateOne) RemoveCityIDs(ids ...int) *StateUpdateOne {
	suo.mutation.RemoveCityIDs(ids...)
	return suo
}

// RemoveCities removes "cities" edges to City entities.
func (suo *StateUpdateOne) RemoveCities(c ...*City) *StateUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCityIDs(ids...)
}

// ClearAirports clears all "airports" edges to the Airport entity.
func (suo *StateUpdateOne) ClearAirports() *StateUpdateOne {
	suo.mutation.ClearAirports()
	return suo
}

// RemoveAirportIDs removes the "airports" edge to Airport entities by IDs.
func (suo *StateUpdateOne) RemoveAirportIDs(ids ...int) *StateUpdateOne {
	suo.mutation.RemoveAirportIDs(ids...)
	return suo
}

// RemoveAirports removes "airports" edges to Airport entities.
func (suo *StateUpdateOne) RemoveAirports(a ...*Airport) *StateUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveAirportIDs(ids...)
}

// Where appends a list predicates to the StateUpdate builder.
func (suo *StateUpdateOne) Where(ps ...predicate.State) *StateUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StateUpdateOne) Select(field string, fields ...string) *StateUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated State entity.
func (suo *StateUpdateOne) Save(ctx context.Context) (*State, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StateUpdateOne) SaveX(ctx context.Context) *State {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StateUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StateUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StateUpdateOne) sqlSave(ctx context.Context) (_node *State, err error) {
	_spec := sqlgraph.NewUpdateSpec(state.Table, state.Columns, sqlgraph.NewFieldSpec(state.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "State.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, state.FieldID)
		for _, f := range fields {
			if !state.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != state.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Code(); ok {
		_spec.SetField(state.FieldCode, field.TypeString, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(state.FieldName, field.TypeString, value)
	}
	if suo.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.CitiesTable,
			Columns: []string{state.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCitiesIDs(); len(nodes) > 0 && !suo.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.CitiesTable,
			Columns: []string{state.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.CitiesTable,
			Columns: []string{state.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AirportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.AirportsTable,
			Columns: []string{state.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAirportsIDs(); len(nodes) > 0 && !suo.mutation.AirportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.AirportsTable,
			Columns: []string{state.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AirportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.AirportsTable,
			Columns: []string{state.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &State{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{state.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
