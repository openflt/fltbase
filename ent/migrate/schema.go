// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AirportsColumns holds the columns for the "airports" table.
	AirportsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "site_id", Type: field.TypeString},
		{Name: "facility_type", Type: field.TypeEnum, Enums: []string{"AIRPORT", "BALLOONPORT", "SEAPLANE_BASE", "GLIDERPORT", "HELIPORT", "ULTRALIGHT"}},
		{Name: "airport_id", Type: field.TypeString},
		{Name: "ado_code", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "ownership_type", Type: field.TypeEnum, Enums: []string{"PU", "PR", "MR", "MA", "MN", "CG"}},
		{Name: "usage", Type: field.TypeEnum, Enums: []string{"PU", "PR"}},
		{Name: "latitude", Type: field.TypeFloat32},
		{Name: "longitude", Type: field.TypeFloat32},
		{Name: "location_survey_method", Type: field.TypeEnum, Enums: []string{"E", "S"}},
		{Name: "elevation", Type: field.TypeFloat32},
		{Name: "elevation_survey_method", Type: field.TypeEnum, Enums: []string{"E", "S"}},
		{Name: "magnetic_variance", Type: field.TypeInt8},
		{Name: "magnetic_variance_year", Type: field.TypeInt8},
		{Name: "traffic_pattern_altitude", Type: field.TypeInt8},
		{Name: "chart_name", Type: field.TypeString},
		{Name: "distance_to_city", Type: field.TypeUint8},
		{Name: "direction_to_city", Type: field.TypeEnum, Enums: []string{"N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"}},
		{Name: "acreage", Type: field.TypeUint8},
		{Name: "artcc_id", Type: field.TypeString},
		{Name: "artcc_name", Type: field.TypeString},
		{Name: "computer_id", Type: field.TypeString},
		{Name: "fss_on_airport", Type: field.TypeBool},
		{Name: "fss_id", Type: field.TypeString},
		{Name: "fss_name", Type: field.TypeString},
		{Name: "phone_number", Type: field.TypeString},
		{Name: "toll_free_number", Type: field.TypeString},
		{Name: "alternate_fss_id", Type: field.TypeString},
		{Name: "alternate_fss_name", Type: field.TypeString},
		{Name: "alternate_toll_free_number", Type: field.TypeString},
		{Name: "notam_id", Type: field.TypeString},
		{Name: "notam_flag", Type: field.TypeBool},
		{Name: "activation_date", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"O", "CI", "CP"}},
		{Name: "city_airports", Type: field.TypeInt, Nullable: true},
		{Name: "region_airports", Type: field.TypeInt, Nullable: true},
		{Name: "state_airports", Type: field.TypeInt, Nullable: true},
	}
	// AirportsTable holds the schema information for the "airports" table.
	AirportsTable = &schema.Table{
		Name:       "airports",
		Columns:    AirportsColumns,
		PrimaryKey: []*schema.Column{AirportsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "airports_cities_airports",
				Columns:    []*schema.Column{AirportsColumns[35]},
				RefColumns: []*schema.Column{CitiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "airports_regions_airports",
				Columns:    []*schema.Column{AirportsColumns[36]},
				RefColumns: []*schema.Column{RegionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "airports_states_airports",
				Columns:    []*schema.Column{AirportsColumns[37]},
				RefColumns: []*schema.Column{StatesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CitiesColumns holds the columns for the "cities" table.
	CitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "state_cities", Type: field.TypeInt, Nullable: true},
	}
	// CitiesTable holds the schema information for the "cities" table.
	CitiesTable = &schema.Table{
		Name:       "cities",
		Columns:    CitiesColumns,
		PrimaryKey: []*schema.Column{CitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cities_states_cities",
				Columns:    []*schema.Column{CitiesColumns[2]},
				RefColumns: []*schema.Column{StatesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CountriesColumns holds the columns for the "countries" table.
	CountriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "code", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
	}
	// CountriesTable holds the schema information for the "countries" table.
	CountriesTable = &schema.Table{
		Name:       "countries",
		Columns:    CountriesColumns,
		PrimaryKey: []*schema.Column{CountriesColumns[0]},
	}
	// RegionsColumns holds the columns for the "regions" table.
	RegionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "code", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
	}
	// RegionsTable holds the schema information for the "regions" table.
	RegionsTable = &schema.Table{
		Name:       "regions",
		Columns:    RegionsColumns,
		PrimaryKey: []*schema.Column{RegionsColumns[0]},
	}
	// StatesColumns holds the columns for the "states" table.
	StatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "code", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
	}
	// StatesTable holds the schema information for the "states" table.
	StatesTable = &schema.Table{
		Name:       "states",
		Columns:    StatesColumns,
		PrimaryKey: []*schema.Column{StatesColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AirportsTable,
		CitiesTable,
		CountriesTable,
		RegionsTable,
		StatesTable,
	}
)

func init() {
	AirportsTable.ForeignKeys[0].RefTable = CitiesTable
	AirportsTable.ForeignKeys[1].RefTable = RegionsTable
	AirportsTable.ForeignKeys[2].RefTable = StatesTable
	CitiesTable.ForeignKeys[0].RefTable = StatesTable
}
