// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openflt/fltbase/ent/airport"
	"github.com/openflt/fltbase/ent/predicate"
	"github.com/openflt/fltbase/ent/region"
)

// RegionUpdate is the builder for updating Region entities.
type RegionUpdate struct {
	config
	hooks    []Hook
	mutation *RegionMutation
}

// Where appends a list predicates to the RegionUpdate builder.
func (ru *RegionUpdate) Where(ps ...predicate.Region) *RegionUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetCode sets the "code" field.
func (ru *RegionUpdate) SetCode(s string) *RegionUpdate {
	ru.mutation.SetCode(s)
	return ru
}

// SetName sets the "name" field.
func (ru *RegionUpdate) SetName(s string) *RegionUpdate {
	ru.mutation.SetName(s)
	return ru
}

// AddAirportIDs adds the "airports" edge to the Airport entity by IDs.
func (ru *RegionUpdate) AddAirportIDs(ids ...int) *RegionUpdate {
	ru.mutation.AddAirportIDs(ids...)
	return ru
}

// AddAirports adds the "airports" edges to the Airport entity.
func (ru *RegionUpdate) AddAirports(a ...*Airport) *RegionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddAirportIDs(ids...)
}

// Mutation returns the RegionMutation object of the builder.
func (ru *RegionUpdate) Mutation() *RegionMutation {
	return ru.mutation
}

// ClearAirports clears all "airports" edges to the Airport entity.
func (ru *RegionUpdate) ClearAirports() *RegionUpdate {
	ru.mutation.ClearAirports()
	return ru
}

// RemoveAirportIDs removes the "airports" edge to Airport entities by IDs.
func (ru *RegionUpdate) RemoveAirportIDs(ids ...int) *RegionUpdate {
	ru.mutation.RemoveAirportIDs(ids...)
	return ru
}

// RemoveAirports removes "airports" edges to Airport entities.
func (ru *RegionUpdate) RemoveAirports(a ...*Airport) *RegionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveAirportIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RegionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RegionUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RegionUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RegionUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RegionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(region.Table, region.Columns, sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Code(); ok {
		_spec.SetField(region.FieldCode, field.TypeString, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(region.FieldName, field.TypeString, value)
	}
	if ru.mutation.AirportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.AirportsTable,
			Columns: []string{region.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedAirportsIDs(); len(nodes) > 0 && !ru.mutation.AirportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.AirportsTable,
			Columns: []string{region.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AirportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.AirportsTable,
			Columns: []string{region.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{region.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RegionUpdateOne is the builder for updating a single Region entity.
type RegionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RegionMutation
}

// SetCode sets the "code" field.
func (ruo *RegionUpdateOne) SetCode(s string) *RegionUpdateOne {
	ruo.mutation.SetCode(s)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RegionUpdateOne) SetName(s string) *RegionUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// AddAirportIDs adds the "airports" edge to the Airport entity by IDs.
func (ruo *RegionUpdateOne) AddAirportIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.AddAirportIDs(ids...)
	return ruo
}

// AddAirports adds the "airports" edges to the Airport entity.
func (ruo *RegionUpdateOne) AddAirports(a ...*Airport) *RegionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddAirportIDs(ids...)
}

// Mutation returns the RegionMutation object of the builder.
func (ruo *RegionUpdateOne) Mutation() *RegionMutation {
	return ruo.mutation
}

// ClearAirports clears all "airports" edges to the Airport entity.
func (ruo *RegionUpdateOne) ClearAirports() *RegionUpdateOne {
	ruo.mutation.ClearAirports()
	return ruo
}

// RemoveAirportIDs removes the "airports" edge to Airport entities by IDs.
func (ruo *RegionUpdateOne) RemoveAirportIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.RemoveAirportIDs(ids...)
	return ruo
}

// RemoveAirports removes "airports" edges to Airport entities.
func (ruo *RegionUpdateOne) RemoveAirports(a ...*Airport) *RegionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveAirportIDs(ids...)
}

// Where appends a list predicates to the RegionUpdate builder.
func (ruo *RegionUpdateOne) Where(ps ...predicate.Region) *RegionUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RegionUpdateOne) Select(field string, fields ...string) *RegionUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Region entity.
func (ruo *RegionUpdateOne) Save(ctx context.Context) (*Region, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RegionUpdateOne) SaveX(ctx context.Context) *Region {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RegionUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RegionUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RegionUpdateOne) sqlSave(ctx context.Context) (_node *Region, err error) {
	_spec := sqlgraph.NewUpdateSpec(region.Table, region.Columns, sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Region.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, region.FieldID)
		for _, f := range fields {
			if !region.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != region.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Code(); ok {
		_spec.SetField(region.FieldCode, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(region.FieldName, field.TypeString, value)
	}
	if ruo.mutation.AirportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.AirportsTable,
			Columns: []string{region.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedAirportsIDs(); len(nodes) > 0 && !ruo.mutation.AirportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.AirportsTable,
			Columns: []string{region.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AirportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.AirportsTable,
			Columns: []string{region.AirportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Region{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{region.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
