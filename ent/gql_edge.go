// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Airport) State(ctx context.Context) (*State, error) {
	result, err := a.Edges.StateOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryState().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Airport) City(ctx context.Context) (*City, error) {
	result, err := a.Edges.CityOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryCity().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Airport) Region(ctx context.Context) (*Region, error) {
	result, err := a.Edges.RegionOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryRegion().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *City) State(ctx context.Context) (*State, error) {
	result, err := c.Edges.StateOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryState().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *City) Airports(ctx context.Context) (result []*Airport, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedAirports(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.AirportsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryAirports().All(ctx)
	}
	return result, err
}

func (r *Region) Airports(ctx context.Context) (result []*Airport, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedAirports(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.AirportsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryAirports().All(ctx)
	}
	return result, err
}

func (s *State) Cities(ctx context.Context) (result []*City, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedCities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.CitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryCities().All(ctx)
	}
	return result, err
}

func (s *State) Airports(ctx context.Context) (result []*Airport, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedAirports(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.AirportsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryAirports().All(ctx)
	}
	return result, err
}
